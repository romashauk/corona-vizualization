{"version":3,"file":"static/webpack/1.5f21c88691b55484fc1e.hot-update.js","sources":["webpack:///./src/containers/WorldMap/index.tsx"],"sourcesContent":["import React, { useState, useContext, useEffect, useMemo } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap, getD3Data } from '../../api';\nimport Loader from '../../components/Loader';\nimport { IVirtualizationResponse, IError, IFeature } from '../../models';\nimport Globe from 'react-globe.gl';\nimport d3 from 'd3';\n\nconst WorldMap: React.FC = () => {\n  const [isLoaded, handleLoaded] = useState<boolean>(false);\n  const [data, handleData] = useState<IVirtualizationResponse>();\n  const [error, handleError] = useState<IError | undefined>(undefined);\n  const [countries, setCountries] = useState<IFeature[]>();\n  const [hoverD, setHoverD] = useState();\n\n  const fetchData = async () => {\n    try {\n      const data = await getDataForMap();\n      const featureData = await getD3Data();\n      handleData(data);\n      setCountries(featureData);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  //   const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  useEffect(() => {\n    if (data && countries) {\n      countries.forEach((country: IFeature) => {\n        const dataCountriesValues = Object.values(data.countries);\n        for (let i = 0; i < dataCountriesValues.length; i++) {\n          if (dataCountriesValues[i].name === country.properties.SOVEREIGNT) {\n            return (country.statistic = dataCountriesValues[i]);\n          }\n        }\n      });\n      handleLoaded(true);\n    }\n  }, [data, countries]);\n  // const maxVal = useMemo(() => Math.max(...countries.features.map(getVal)), [countries]);\n  //   const getVal = (feat) => feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n  //   colorScale.domain([0, maxVal]);\n\n  const getColor = (feature: IFeature): string => {\n    if (feature.statistic) {\n      const maxCases = 200000;\n      const multipier = feature.statistic.cases / maxCases;\n      return `rgba(200, 0, 0, ${multipier})`;\n    } else {\n      return `rgba(200, 0, 0, 0)`;\n    }\n  };\n  const getLabelString = (properties: IFeature): string => {\n    if (properties.statistic)\n      return `<div> ${properties.statistic.name}</div>\n    `;\n    else\n      return `\n      <div>${properties.properties.NAME_SORT}</div>\n    `;\n  };\n\n  if (error) {\n    return <div>Something went wrong </div>;\n  }\n  if (!isLoaded) {\n    return <Loader />;\n  }\n  return (\n    <div className={styles.worldMapContainer}>\n      <Globe\n        globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-dark.jpg\"\n        backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n        polygonsData={countries}\n        polygonAltitude={(d) => (d === hoverD ? 0.12 : 0.06)}\n        polygonCapColor={(d) => getColor(d)}\n        polygonSideColor={(d: IFeature) => 'rgba(0, 100, 0, 0.15)'}\n        polygonStrokeColor={() => 'red'}\n        polygonLabel={(item) => getLabelString(item)}\n        onPolygonHover={setHoverD}\n        onPolygonClick={(r) => console.log(r)}\n        polygonsTransitionDuration={300}\n      />\n    </div>\n  );\n};\n\nexport default WorldMap;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAMA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AACA;AADA;AAGA;AACA;AACA;AALA;AAAA;AACA;AADA;AAAA;AAAA;AAOA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;;;;A","sourceRoot":""}