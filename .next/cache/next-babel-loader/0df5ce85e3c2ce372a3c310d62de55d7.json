{"ast":null,"code":"var _jsxFileName = \"/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useMemo } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap } from '../../api';\nimport Loader from '../../components/Loader';\nimport Globe from 'react-globe.gl';\n\nconst WorldMap = () => {\n  const {\n    0: isLoaded,\n    1: handleLoaded\n  } = useState(false);\n  const {\n    0: data,\n    1: handleData\n  } = useState();\n  const {\n    0: error,\n    1: handleError\n  } = useState(undefined);\n  const {\n    0: countries,\n    1: setCountries\n  } = useState({\n    features: []\n  });\n  const {\n    0: hoverD,\n    1: setHoverD\n  } = useState();\n\n  const fetchData = async () => {\n    try {\n      const data = await getDataForMap();\n      handleData(data);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  useEffect(() => {\n    fetch('https://vasturiano.github.io/globe.gl/example/datasets/ne_110m_admin_0_countries.geojson').then(res => res.json()).then(setCountries);\n    fetchData();\n  }, []); //   const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  useEffect(() => {\n    if (data) {\n      handleLoaded(true);\n    }\n  }, [data]);\n  const maxVal = useMemo(() => Math.max(...countries.features.map(getVal)), [countries]);\n\n  const getVal = feat => feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST); // colorScale.domain([0, maxVal]);\n\n\n  if (error) {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Something went wrong \");\n  }\n\n  if (!isLoaded) {\n    return __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    });\n  }\n\n  console.log();\n  return __jsx(\"div\", {\n    className: styles.worldMapContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, __jsx(Globe, {\n    globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-dark.jpg\",\n    backgroundImageUrl: \"//unpkg.com/three-globe/example/img/night-sky.png\",\n    polygonsData: countries.features,\n    polygonAltitude: d => d === hoverD ? 0.12 : 0.06,\n    polygonCapColor: d => 'red',\n    polygonSideColor: () => 'rgba(0, 123, 0, 0.15)',\n    polygonStrokeColor: () => '#111',\n    polygonLabel: ({\n      properties: d\n    }) => `\n        <b>${d.ADMIN} (${d.ISO_A2}):</b> <br />\n        GDP: <i>${d.GDP_MD_EST}</i> M$<br/>\n        Population: <i>${d.POP_EST}</i>\n      `,\n    onPolygonHover: setHoverD,\n    polygonsTransitionDuration: 300,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }));\n};\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx"],"names":["React","useState","useEffect","useMemo","styles","getDataForMap","Loader","Globe","WorldMap","isLoaded","handleLoaded","data","handleData","error","handleError","undefined","countries","setCountries","features","hoverD","setHoverD","fetchData","e","fetch","then","res","json","maxVal","Math","max","map","getVal","feat","properties","GDP_MD_EST","POP_EST","console","log","worldMapContainer","d","ADMIN","ISO_A2"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useMemo } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap } from '../../api';\nimport Loader from '../../components/Loader';\nimport { IVirtualizationResponse, IError } from '../../models';\nimport Globe from 'react-globe.gl';\nimport d3 from 'd3';\n\nconst WorldMap: React.FC = () => {\n  const [isLoaded, handleLoaded] = useState<boolean>(false);\n  const [data, handleData] = useState<IVirtualizationResponse>();\n  const [error, handleError] = useState<IError | undefined>(undefined);\n  const [countries, setCountries] = useState({ features: [] });\n  const [hoverD, setHoverD] = useState();\n\n  const fetchData = async () => {\n    try {\n      const data = await getDataForMap();\n      handleData(data);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  useEffect(() => {\n    fetch('https://vasturiano.github.io/globe.gl/example/datasets/ne_110m_admin_0_countries.geojson')\n      .then((res) => res.json())\n      .then(setCountries);\n    fetchData();\n  }, []);\n  //   const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  useEffect(() => {\n    if (data) {\n      handleLoaded(true);\n    }\n  }, [data]);\n  const maxVal = useMemo(() => Math.max(...countries.features.map(getVal)), [countries]);\n  const getVal = (feat) => feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n  // colorScale.domain([0, maxVal]);\n\n  if (error) {\n    return <div>Something went wrong </div>;\n  }\n  if (!isLoaded) {\n    return <Loader />;\n  }\n  console.log();\n  return (\n    <div className={styles.worldMapContainer}>\n      <Globe\n        globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-dark.jpg\"\n        backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n        polygonsData={countries.features}\n        polygonAltitude={(d) => (d === hoverD ? 0.12 : 0.06)}\n        polygonCapColor={(d) => 'red'}\n        polygonSideColor={() => 'rgba(0, 123, 0, 0.15)'}\n        polygonStrokeColor={() => '#111'}\n        polygonLabel={({ properties: d }) => `\n        <b>${d.ADMIN} (${d.ISO_A2}):</b> <br />\n        GDP: <i>${d.GDP_MD_EST}</i> M$<br/>\n        Population: <i>${d.POP_EST}</i>\n      `}\n        onPolygonHover={setHoverD}\n        polygonsTransitionDuration={300}\n      />\n    </div>\n  );\n};\n\nexport default WorldMap;\n"]},"metadata":{},"sourceType":"module"}