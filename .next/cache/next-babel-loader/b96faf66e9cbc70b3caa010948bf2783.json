{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nexport const apiUrl = 'https://cors-anywhere.herokuapp.com/https://api.the2019ncov.com/api/';\nexport const codevizApi = 'https://cors-anywhere.herokuapp.com/https://www.covidvisualizer.com/api';\nexport const getAllCases = () => {\n  return new _Promise(async (resolve, reject) => {\n    const link = `${apiUrl}/cases`;\n    fetch(link).then(res => res.json()).catch(err => reject({\n      code: 401,\n      message: err.message\n    })).then(res => resolve(res));\n  });\n};\nexport const getTimeLineNews = () => {\n  return new _Promise((resolve, reject) => {\n    const link = `${apiUrl}/timeline`;\n    fetch(link).then(res => res.json()).catch(err => reject({\n      code: 401,\n      message: err.message\n    })).then(res => resolve(res));\n  });\n};\nexport const getCountry = () => {\n  return new _Promise((resolve, reject) => {\n    fetch('http://ip-api.com/json').then(res => res.json()).catch(err => reject({\n      code: 401,\n      message: err.message\n    })).then(res => resolve({\n      status: res.status,\n      country: res.country\n    }));\n  });\n};\nexport const getDataForMap = () => {\n  return new _Promise((resolve, reject) => {\n    fetch(codevizApi).then(res => res.json()).catch(err => reject({\n      code: 401,\n      message: err.message\n    })).then(res => resolve(res));\n  });\n};","map":{"version":3,"sources":["/Users/roman/Desktop/projects/corona/src/api/index.ts"],"names":["apiUrl","codevizApi","getAllCases","resolve","reject","link","fetch","then","res","json","catch","err","code","message","getTimeLineNews","getCountry","status","country","getDataForMap"],"mappings":";AAEA,OAAO,MAAMA,MAAM,GAAG,sEAAf;AACP,OAAO,MAAMC,UAAU,GAAG,yEAAnB;AAEP,OAAO,MAAMC,WAAW,GAAG,MAA+B;AACxD,SAAO,aAA4B,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5D,UAAMC,IAAI,GAAI,GAAEL,MAAO,QAAvB;AACAM,IAAAA,KAAK,CAACD,IAAD,CAAL,CACGE,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGC,KAFH,CAEUC,GAAD,IAASP,MAAM,CAAC;AAAEQ,MAAAA,IAAI,EAAE,GAAR;AAAaC,MAAAA,OAAO,EAAEF,GAAG,CAACE;AAA1B,KAAD,CAFxB,EAGGN,IAHH,CAGSC,GAAD,IAASL,OAAO,CAACK,GAAD,CAHxB;AAID,GANM,CAAP;AAOD,CARM;AAUP,OAAO,MAAMM,eAAe,GAAG,MAAoC;AACjE,SAAO,aAAiC,CAACX,OAAD,EAAUC,MAAV,KAAqB;AAC3D,UAAMC,IAAI,GAAI,GAAEL,MAAO,WAAvB;AACAM,IAAAA,KAAK,CAACD,IAAD,CAAL,CACGE,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGC,KAFH,CAEUC,GAAD,IAASP,MAAM,CAAC;AAAEQ,MAAAA,IAAI,EAAE,GAAR;AAAaC,MAAAA,OAAO,EAAEF,GAAG,CAACE;AAA1B,KAAD,CAFxB,EAGGN,IAHH,CAGSC,GAAD,IAASL,OAAO,CAACK,GAAD,CAHxB;AAID,GANM,CAAP;AAOD,CARM;AAUP,OAAO,MAAMO,UAAU,GAAG,MAAyB;AACjD,SAAO,aAAsB,CAACZ,OAAD,EAAUC,MAAV,KAAqB;AAChDE,IAAAA,KAAK,CAAC,wBAAD,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGC,KAFH,CAEUC,GAAD,IAASP,MAAM,CAAC;AAAEQ,MAAAA,IAAI,EAAE,GAAR;AAAaC,MAAAA,OAAO,EAAEF,GAAG,CAACE;AAA1B,KAAD,CAFxB,EAGGN,IAHH,CAGSC,GAAD,IAASL,OAAO,CAAC;AAAEa,MAAAA,MAAM,EAAER,GAAG,CAACQ,MAAd;AAAsBC,MAAAA,OAAO,EAAET,GAAG,CAACS;AAAnC,KAAD,CAHxB;AAID,GALM,CAAP;AAMD,CAPM;AASP,OAAO,MAAMC,aAAa,GAAG,MAAwC;AACnE,SAAO,aAAqC,CAACf,OAAD,EAAUC,MAAV,KAAqB;AAC/DE,IAAAA,KAAK,CAACL,UAAD,CAAL,CACGM,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGC,KAFH,CAEUC,GAAD,IAASP,MAAM,CAAC;AAAEQ,MAAAA,IAAI,EAAE,GAAR;AAAaC,MAAAA,OAAO,EAAEF,GAAG,CAACE;AAA1B,KAAD,CAFxB,EAGGN,IAHH,CAGSC,GAAD,IAASL,OAAO,CAACK,GAAD,CAHxB;AAID,GALM,CAAP;AAMD,CAPM","sourcesContent":["import { ITimeLineResponse, ICountry, ICountryStatistic, IDateStatistic, IVirtualizationResponse } from '../models';\n\nexport const apiUrl = 'https://cors-anywhere.herokuapp.com/https://api.the2019ncov.com/api/';\nexport const codevizApi = 'https://cors-anywhere.herokuapp.com/https://www.covidvisualizer.com/api';\n\nexport const getAllCases = (): Promise<IDateStatistic> => {\n  return new Promise<IDateStatistic>(async (resolve, reject) => {\n    const link = `${apiUrl}/cases`;\n    fetch(link)\n      .then((res) => res.json())\n      .catch((err) => reject({ code: 401, message: err.message }))\n      .then((res) => resolve(res));\n  });\n};\n\nexport const getTimeLineNews = (): Promise<ITimeLineResponse[]> => {\n  return new Promise<ITimeLineResponse[]>((resolve, reject) => {\n    const link = `${apiUrl}/timeline`;\n    fetch(link)\n      .then((res) => res.json())\n      .catch((err) => reject({ code: 401, message: err.message }))\n      .then((res) => resolve(res));\n  });\n};\n\nexport const getCountry = (): Promise<ICountry> => {\n  return new Promise<ICountry>((resolve, reject) => {\n    fetch('http://ip-api.com/json')\n      .then((res) => res.json())\n      .catch((err) => reject({ code: 401, message: err.message }))\n      .then((res) => resolve({ status: res.status, country: res.country }));\n  });\n};\n\nexport const getDataForMap = (): Promise<IVirtualizationResponse> => {\n  return new Promise<IVirtualizationResponse>((resolve, reject) => {\n    fetch(codevizApi)\n      .then((res) => res.json())\n      .catch((err) => reject({ code: 401, message: err.message }))\n      .then((res) => resolve(res));\n  });\n};\n"]},"metadata":{},"sourceType":"module"}