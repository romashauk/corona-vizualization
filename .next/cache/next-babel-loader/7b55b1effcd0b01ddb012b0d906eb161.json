{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useRef, useEffect, useMemo, useCallback } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap, getD3Data } from '../../api';\nimport Loader from '../../components/Loader';\nimport Globe from 'react-globe.gl';\nimport * as d3 from 'd3';\nimport CountryInfoModal from './CountryInfoModal';\n\nvar WorldMap = function WorldMap() {\n  var globeEl = useRef(null);\n\n  var _useState = useState(false),\n      isLoaded = _useState[0],\n      handleLoaded = _useState[1];\n\n  var _useState2 = useState(),\n      data = _useState2[0],\n      handleData = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      error = _useState3[0],\n      handleError = _useState3[1];\n\n  var _useState4 = useState(),\n      countries = _useState4[0],\n      setCountries = _useState4[1];\n\n  var _useState5 = useState(),\n      hoverD = _useState5[0],\n      setHoverD = _useState5[1];\n\n  var _useState6 = useState(false),\n      isModalOpen = _useState6[0],\n      setModalState = _useState6[1];\n\n  var _useState7 = useState(),\n      selectedCountry = _useState7[0],\n      setSelectedCountry = _useState7[1];\n\n  var fetchData = function fetchData() {\n    var featureData;\n    return _regeneratorRuntime.async(function fetchData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getD3Data());\n\n          case 3:\n            featureData = _context.sent;\n            setCountries(featureData);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            handleError(_context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]]);\n  };\n\n  var fetchDataForMap = function fetchDataForMap() {\n    var _data;\n\n    return _regeneratorRuntime.async(function fetchDataForMap$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(getDataForMap());\n\n          case 3:\n            _data = _context2.sent;\n            handleData(_data);\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            handleError(_context2.t0);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]]);\n  };\n\n  var handleGlobeClick = function handleGlobeClick(event) {\n    if (hoverD) {\n      setSelectedCountry(hoverD);\n      setModalState(true);\n    } else {\n      setModalState(false);\n      setSelectedCountry(undefined);\n    }\n  };\n\n  useEffect(function () {\n    fetchData();\n    fetchDataForMap();\n  }, []);\n  useEffect(function () {\n    // aim at continental US centroid\n    if (globeEl.current) {\n      console.log('works');\n      globeEl.current.pointOfView({\n        lat: 49,\n        lng: 32,\n        altitude: 0.6\n      });\n    }\n  }, [_JSON$stringify(globeEl)]);\n  var scaleSequentialSqrt = d3['scaleSequentialSqrt'];\n  useEffect(function () {\n    if (data && countries) {\n      countries.forEach(function (country) {\n        var dataCountriesValues = _Object$values(data.countries);\n\n        for (var i = 0; i < dataCountriesValues.length; i++) {\n          if (dataCountriesValues[i].name === country.properties.NAME_LONG || dataCountriesValues[i].name === country.properties.SOVEREIGNT || dataCountriesValues[i].name === country.properties.FORMAL_EN) {\n            return country.statistic = dataCountriesValues[i];\n          }\n        }\n      });\n    }\n  }, [data, countries]);\n  useEffect(function () {\n    if (countries) {\n      handleLoaded(true);\n    }\n  }, [countries]);\n  var maxCases = 2000000;\n  var colorScale = scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  var getVal = function getVal(feat) {\n    if (feat.statistic) {\n      return feat.statistic.cases / Math.max(1e5, maxCases);\n    } else {\n      return feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n    }\n  };\n\n  var maxVal = useMemo(function () {\n    return countries && Math.max.apply(Math, _toConsumableArray(countries.map(getVal)));\n  }, [countries]);\n  colorScale.domain([0, maxVal]);\n\n  var getLabelString = function getLabelString(properties) {\n    if (!hoverD) {\n      setHoverD(properties);\n    }\n\n    if (properties.statistic) return \"<div> \".concat(properties.statistic.name, \"</div>\\n    \");else return \"\\n      <div>\".concat(properties.properties.NAME_SORT, \"</div>\\n    \");\n  };\n\n  var _onPolygonClick = useCallback(function (feature) {\n    setModalState(true);\n\n    if (feature) {\n      setSelectedCountry(feature);\n    } else {\n      setSelectedCountry(undefined);\n      setModalState(false);\n    }\n  }, [selectedCountry]);\n\n  if (error) {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Something went wrong \");\n  }\n\n  if (!isLoaded) {\n    return __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    });\n  }\n\n  var isMobile = window.innerWidth < 700;\n  return __jsx(\"div\", {\n    onClick: handleGlobeClick,\n    className: styles.worldMapContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, __jsx(Globe, {\n    ref: globeEl,\n    globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-dark.jpg\",\n    backgroundImageUrl: \"//unpkg.com/three-globe/example/img/night-sky.png\",\n    polygonsData: countries,\n    polygonAltitude: function polygonAltitude(d) {\n      return d === hoverD ? 0.12 : 0.06;\n    },\n    polygonCapColor: function polygonCapColor(d) {\n      return d === hoverD ? 'steelblue' : colorScale(getVal(d));\n    },\n    polygonStrokeColor: function polygonStrokeColor() {\n      return '#111';\n    },\n    polygonLabel: !isMobile ? function (item) {\n      return getLabelString(item);\n    } : '',\n    onPolygonHover: setHoverD,\n    onPolygonClick: function onPolygonClick(r) {\n      return _onPolygonClick(r);\n    },\n    polygonsTransitionDuration: 300,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }), selectedCountry && selectedCountry.statistic && __jsx(CountryInfoModal, {\n    isOpen: isModalOpen,\n    coutryStatistic: selectedCountry.statistic,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }));\n};\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx"],"names":["React","useState","useRef","useEffect","useMemo","useCallback","styles","getDataForMap","getD3Data","Loader","Globe","d3","CountryInfoModal","WorldMap","globeEl","isLoaded","handleLoaded","data","handleData","undefined","error","handleError","countries","setCountries","hoverD","setHoverD","isModalOpen","setModalState","selectedCountry","setSelectedCountry","fetchData","featureData","fetchDataForMap","handleGlobeClick","event","current","console","log","pointOfView","lat","lng","altitude","scaleSequentialSqrt","forEach","country","dataCountriesValues","i","length","name","properties","NAME_LONG","SOVEREIGNT","FORMAL_EN","statistic","maxCases","colorScale","interpolateYlOrRd","getVal","feat","cases","Math","max","GDP_MD_EST","POP_EST","maxVal","map","domain","getLabelString","NAME_SORT","onPolygonClick","feature","isMobile","window","innerWidth","worldMapContainer","d","item","r"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useMemo, useCallback } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap, getD3Data } from '../../api';\nimport Loader from '../../components/Loader';\nimport { IVirtualizationResponse, IError, IFeature } from '../../models';\nimport Globe from 'react-globe.gl';\nimport * as d3 from 'd3';\nimport CountryInfoModal from './CountryInfoModal';\n\nconst WorldMap: React.FC = () => {\n  const globeEl = useRef(null);\n  const [isLoaded, handleLoaded] = useState<boolean>(false);\n  const [data, handleData] = useState<IVirtualizationResponse>();\n  const [error, handleError] = useState<IError | undefined>(undefined);\n  const [countries, setCountries] = useState<IFeature[]>();\n  const [hoverD, setHoverD] = useState();\n  const [isModalOpen, setModalState] = useState<boolean>(false);\n  const [selectedCountry, setSelectedCountry] = useState<IFeature>();\n\n  const fetchData = async () => {\n    try {\n      const featureData = await getD3Data();\n      setCountries(featureData);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  const fetchDataForMap = async () => {\n    try {\n      const data = await getDataForMap();\n      handleData(data);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  const handleGlobeClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>): void => {\n    if (hoverD) {\n      setSelectedCountry(hoverD);\n      setModalState(true);\n    } else {\n      setModalState(false);\n      setSelectedCountry(undefined);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n    fetchDataForMap();\n  }, []);\n\n  useEffect(() => {\n    // aim at continental US centroid\n    if (globeEl.current) {\n      console.log('works');\n      globeEl.current.pointOfView({ lat: 49, lng: 32, altitude: 0.6 });\n    }\n  }, [JSON.stringify(globeEl)]);\n\n  const scaleSequentialSqrt = d3['scaleSequentialSqrt'];\n\n  useEffect(() => {\n    if (data && countries) {\n      countries.forEach((country: IFeature) => {\n        const dataCountriesValues = Object.values(data.countries);\n        for (let i = 0; i < dataCountriesValues.length; i++) {\n          if (\n            dataCountriesValues[i].name === country.properties.NAME_LONG ||\n            dataCountriesValues[i].name === country.properties.SOVEREIGNT ||\n            dataCountriesValues[i].name === country.properties.FORMAL_EN\n          ) {\n            return (country.statistic = dataCountriesValues[i]);\n          }\n        }\n      });\n    }\n  }, [data, countries]);\n\n  useEffect(() => {\n    if (countries) {\n      handleLoaded(true);\n    }\n  }, [countries]);\n\n  const maxCases = 2000000;\n\n  const colorScale = scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  const getVal = (feat: any) => {\n    if (feat.statistic) {\n      return feat.statistic.cases / Math.max(1e5, maxCases);\n    } else {\n      return feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n    }\n  };\n\n  const maxVal = useMemo(() => countries && Math.max(...countries.map(getVal)), [countries]);\n\n  colorScale.domain([0, maxVal]);\n\n  const getLabelString = (properties: any): string => {\n    if (!hoverD) {\n      setHoverD(properties);\n    }\n    if (properties.statistic)\n      return `<div> ${properties.statistic.name}</div>\n    `;\n    else\n      return `\n      <div>${properties.properties.NAME_SORT}</div>\n    `;\n  };\n\n  const onPolygonClick = useCallback(\n    (feature: any) => {\n      setModalState(true);\n      if (feature) {\n        setSelectedCountry(feature);\n      } else {\n        setSelectedCountry(undefined);\n        setModalState(false);\n      }\n    },\n    [selectedCountry]\n  );\n\n  if (error) {\n    return <div>Something went wrong </div>;\n  }\n  if (!isLoaded) {\n    return <Loader />;\n  }\n\n  const isMobile = window.innerWidth < 700;\n\n  return (\n    <div onClick={handleGlobeClick} className={styles.worldMapContainer}>\n      <Globe\n        ref={globeEl}\n        globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-dark.jpg\"\n        backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n        polygonsData={countries}\n        polygonAltitude={(d) => (d === hoverD ? 0.12 : 0.06)}\n        polygonCapColor={(d) => (d === hoverD ? 'steelblue' : colorScale(getVal(d)))}\n        polygonStrokeColor={() => '#111'}\n        polygonLabel={!isMobile ? (item) => getLabelString(item) : ''}\n        onPolygonHover={setHoverD}\n        onPolygonClick={(r) => onPolygonClick(r)}\n        polygonsTransitionDuration={300}\n      />\n      {selectedCountry && selectedCountry.statistic && (\n        <CountryInfoModal isOpen={isModalOpen} coutryStatistic={selectedCountry.statistic} />\n      )}\n    </div>\n  );\n};\n\nexport default WorldMap;\n"]},"metadata":{},"sourceType":"module"}