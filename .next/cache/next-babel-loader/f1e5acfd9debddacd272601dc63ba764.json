{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap, getD3Data } from '../../api';\nimport Loader from '../../components/Loader';\nimport Globe from 'react-globe.gl';\nimport * as d3 from 'd3';\nimport CountryInfoModal from './CountryInfoModal';\n\nconst WorldMap = () => {\n  const {\n    0: isLoaded,\n    1: handleLoaded\n  } = useState(false);\n  const {\n    0: data,\n    1: handleData\n  } = useState();\n  const {\n    0: error,\n    1: handleError\n  } = useState(undefined);\n  const {\n    0: countries,\n    1: setCountries\n  } = useState();\n  const {\n    0: hoverD,\n    1: setHoverD\n  } = useState();\n  const {\n    0: isModalOpen,\n    1: setModalState\n  } = useState(false);\n  const {\n    0: selectedCountry,\n    1: setSelectedCountry\n  } = useState();\n  const {\n    0: clickCoordinates,\n    1: setClickCoordinates\n  } = useState();\n\n  const fetchData = async () => {\n    try {\n      const featureData = await getD3Data();\n      setCountries(featureData);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  const fetchDataForMap = async () => {\n    try {\n      const data = await getDataForMap();\n      handleData(data);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  const handleGlobeClick = event => {\n    console.log(hoverD);\n\n    if (hoverD) {\n      setSelectedCountry(hoverD);\n      setModalState(true);\n    } else {\n      setModalState(false);\n      setSelectedCountry(undefined);\n    }\n\n    setClickCoordinates(_objectSpread({}, clickCoordinates, {\n      x: event.clientX,\n      y: event.clientY\n    }));\n  };\n\n  useEffect(() => {\n    fetchData();\n    fetchDataForMap();\n  }, []);\n  const scaleSequentialSqrt = d3['scaleSequentialSqrt'];\n  useEffect(() => {\n    if (data && countries) {\n      countries.forEach(country => {\n        const dataCountriesValues = _Object$values(data.countries);\n\n        for (let i = 0; i < dataCountriesValues.length; i++) {\n          if (dataCountriesValues[i].name === country.properties.SOVEREIGNT) {\n            return country.statistic = dataCountriesValues[i];\n          }\n        }\n      });\n    }\n  }, [data, countries]);\n  useEffect(() => {\n    if (countries) {\n      handleLoaded(true);\n    }\n  }, [countries]);\n  const maxCases = 1000000;\n  const colorScale = scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  const getVal = feat => {\n    if (feat.statistic) {\n      return feat.statistic.cases / Math.max(1e5, maxCases);\n    } else {\n      return feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n    }\n  };\n\n  const maxVal = useMemo(() => countries && Math.max(...countries.map(getVal)), [countries]);\n  colorScale.domain([0, maxVal]);\n\n  const getLabelString = properties => {\n    if (!hoverD) {\n      setHoverD(properties);\n    }\n\n    if (properties.statistic) return `<div> ${properties.statistic.name}</div>\n    `;else return `\n      <div>${properties.properties.NAME_SORT}</div>\n    `;\n  };\n\n  const onPolygonClick = useCallback(feature => {\n    setModalState(true);\n\n    if (feature) {\n      setSelectedCountry(feature);\n    } else {\n      setSelectedCountry(undefined);\n      setModalState(false);\n    }\n  }, [selectedCountry]);\n\n  if (error) {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Something went wrong \");\n  }\n\n  if (!isLoaded) {\n    return __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    });\n  }\n\n  return __jsx(\"div\", {\n    onClick: handleGlobeClick,\n    className: styles.worldMapContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, __jsx(Globe, {\n    globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-dark.jpg\",\n    backgroundImageUrl: \"//unpkg.com/three-globe/example/img/night-sky.png\",\n    polygonsData: countries,\n    polygonAltitude: d => d === hoverD ? 0.12 : 0.06,\n    polygonCapColor: d => d === hoverD ? 'steelblue' : colorScale(getVal(d)),\n    polygonStrokeColor: () => '#111',\n    polygonLabel: item => getLabelString(item),\n    onPolygonHover: setHoverD,\n    onPolygonClick: r => onPolygonClick(r),\n    polygonsTransitionDuration: 300,\n    pointOfView: () => {\n      return {\n        lat: 42,\n        lng: 12\n      };\n    },\n    hexBinPointWeight: 'pop',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }), selectedCountry && selectedCountry.statistic && clickCoordinates && __jsx(CountryInfoModal, {\n    isOpen: isModalOpen,\n    coordinates: {\n      x: clickCoordinates.x,\n      y: clickCoordinates.y\n    },\n    coutryStatistic: selectedCountry.statistic,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }));\n};\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx"],"names":["React","useState","useEffect","useMemo","useCallback","styles","getDataForMap","getD3Data","Loader","Globe","d3","CountryInfoModal","WorldMap","isLoaded","handleLoaded","data","handleData","error","handleError","undefined","countries","setCountries","hoverD","setHoverD","isModalOpen","setModalState","selectedCountry","setSelectedCountry","clickCoordinates","setClickCoordinates","fetchData","featureData","e","fetchDataForMap","handleGlobeClick","event","console","log","x","clientX","y","clientY","scaleSequentialSqrt","forEach","country","dataCountriesValues","i","length","name","properties","SOVEREIGNT","statistic","maxCases","colorScale","interpolateYlOrRd","getVal","feat","cases","Math","max","GDP_MD_EST","POP_EST","maxVal","map","domain","getLabelString","NAME_SORT","onPolygonClick","feature","worldMapContainer","d","item","r","lat","lng"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useMemo, useCallback } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap, getD3Data } from '../../api';\nimport Loader from '../../components/Loader';\nimport { IVirtualizationResponse, IError, IFeature } from '../../models';\nimport Globe from 'react-globe.gl';\nimport * as d3 from 'd3';\nimport CountryInfoModal from './CountryInfoModal';\n\nconst WorldMap: React.FC = () => {\n  const [isLoaded, handleLoaded] = useState<boolean>(false);\n  const [data, handleData] = useState<IVirtualizationResponse>();\n  const [error, handleError] = useState<IError | undefined>(undefined);\n  const [countries, setCountries] = useState<IFeature[]>();\n  const [hoverD, setHoverD] = useState();\n  const [isModalOpen, setModalState] = useState<boolean>(false);\n  const [selectedCountry, setSelectedCountry] = useState<IFeature>();\n  const [clickCoordinates, setClickCoordinates] = useState<{ x: number; y: number }>();\n\n  const fetchData = async () => {\n    try {\n      const featureData = await getD3Data();\n      setCountries(featureData);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  const fetchDataForMap = async () => {\n    try {\n      const data = await getDataForMap();\n      handleData(data);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  const handleGlobeClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>): void => {\n    console.log(hoverD);\n    if (hoverD) {\n      setSelectedCountry(hoverD);\n      setModalState(true);\n    } else {\n      setModalState(false);\n      setSelectedCountry(undefined);\n    }\n    setClickCoordinates({ ...clickCoordinates, x: event.clientX, y: event.clientY });\n  };\n\n  useEffect(() => {\n    fetchData();\n    fetchDataForMap();\n  }, []);\n\n  const scaleSequentialSqrt = d3['scaleSequentialSqrt'];\n\n  useEffect(() => {\n    if (data && countries) {\n      countries.forEach((country: IFeature) => {\n        const dataCountriesValues = Object.values(data.countries);\n        for (let i = 0; i < dataCountriesValues.length; i++) {\n          if (dataCountriesValues[i].name === country.properties.SOVEREIGNT) {\n            return (country.statistic = dataCountriesValues[i]);\n          }\n        }\n      });\n    }\n  }, [data, countries]);\n\n  useEffect(() => {\n    if (countries) {\n      handleLoaded(true);\n    }\n  }, [countries]);\n\n  const maxCases = 1000000;\n\n  const colorScale = scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  const getVal = (feat: IFeature) => {\n    if (feat.statistic) {\n      return feat.statistic.cases / Math.max(1e5, maxCases);\n    } else {\n      return feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n    }\n  };\n\n  const maxVal = useMemo(() => countries && Math.max(...countries.map(getVal)), [countries]);\n\n  colorScale.domain([0, maxVal]);\n\n  const getLabelString = (properties: IFeature): string => {\n    if (!hoverD) {\n      setHoverD(properties);\n    }\n    if (properties.statistic)\n      return `<div> ${properties.statistic.name}</div>\n    `;\n    else\n      return `\n      <div>${properties.properties.NAME_SORT}</div>\n    `;\n  };\n\n  const onPolygonClick = useCallback(\n    (feature: IFeature) => {\n      setModalState(true);\n      if (feature) {\n        setSelectedCountry(feature);\n      } else {\n        setSelectedCountry(undefined);\n        setModalState(false);\n      }\n    },\n    [selectedCountry]\n  );\n\n  if (error) {\n    return <div>Something went wrong </div>;\n  }\n  if (!isLoaded) {\n    return <Loader />;\n  }\n  return (\n    <div onClick={handleGlobeClick} className={styles.worldMapContainer}>\n      <Globe\n        globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-dark.jpg\"\n        backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n        polygonsData={countries}\n        polygonAltitude={(d) => (d === hoverD ? 0.12 : 0.06)}\n        polygonCapColor={(d) => (d === hoverD ? 'steelblue' : colorScale(getVal(d)))}\n        polygonStrokeColor={() => '#111'}\n        polygonLabel={(item) => getLabelString(item)}\n        onPolygonHover={setHoverD}\n        onPolygonClick={(r) => onPolygonClick(r)}\n        polygonsTransitionDuration={300}\n        pointOfView={() => {\n          return { lat: 42, lng: 12 };\n        }}\n        hexBinPointWeight={'pop'}\n      />\n      {selectedCountry && selectedCountry.statistic && clickCoordinates && (\n        <CountryInfoModal\n          isOpen={isModalOpen}\n          coordinates={{ x: clickCoordinates.x, y: clickCoordinates.y }}\n          coutryStatistic={selectedCountry.statistic}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default WorldMap;\n"]},"metadata":{},"sourceType":"module"}