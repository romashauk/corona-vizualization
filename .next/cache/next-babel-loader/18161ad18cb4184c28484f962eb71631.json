{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap, getD3Data } from '../../api';\nimport Loader from '../../components/Loader';\nimport Globe from 'react-globe.gl';\nimport * as d3 from 'd3';\nimport CountryInfoModal from './CountryInfoModal';\n\nvar WorldMap = function WorldMap() {\n  var _useState = useState(false),\n      isLoaded = _useState[0],\n      handleLoaded = _useState[1];\n\n  var _useState2 = useState(),\n      data = _useState2[0],\n      handleData = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      error = _useState3[0],\n      handleError = _useState3[1];\n\n  var _useState4 = useState(),\n      countries = _useState4[0],\n      setCountries = _useState4[1];\n\n  var _useState5 = useState(),\n      hoverD = _useState5[0],\n      setHoverD = _useState5[1];\n\n  var _useState6 = useState(false),\n      isModalOpen = _useState6[0],\n      setModalState = _useState6[1];\n\n  var _useState7 = useState(),\n      selectedCountry = _useState7[0],\n      setSelectedCountry = _useState7[1];\n\n  var _useState8 = useState(),\n      clickCoordinates = _useState8[0],\n      setClickCoordinates = _useState8[1];\n\n  var fetchData = function fetchData() {\n    var featureData;\n    return _regeneratorRuntime.async(function fetchData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getD3Data());\n\n          case 3:\n            featureData = _context.sent;\n            setCountries(featureData);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            handleError(_context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]]);\n  };\n\n  var fetchDataForMap = function fetchDataForMap() {\n    var _data;\n\n    return _regeneratorRuntime.async(function fetchDataForMap$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(getDataForMap());\n\n          case 3:\n            _data = _context2.sent;\n            handleData(_data);\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            handleError(_context2.t0);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]]);\n  };\n\n  var handleGlobeClick = function handleGlobeClick(event) {\n    console.log(hoverD);\n\n    if (hoverD) {\n      setSelectedCountry(hoverD);\n      setModalState(true);\n    } else {\n      setModalState(false);\n      setSelectedCountry(undefined);\n    }\n\n    setClickCoordinates(_objectSpread({}, clickCoordinates, {\n      x: event.clientX,\n      y: event.clientY\n    }));\n  };\n\n  useEffect(function () {\n    fetchData();\n    fetchDataForMap();\n  }, []);\n  var scaleSequentialSqrt = d3['scaleSequentialSqrt'];\n  useEffect(function () {\n    if (data && countries) {\n      countries.forEach(function (country) {\n        var dataCountriesValues = _Object$values(data.countries);\n\n        for (var i = 0; i < dataCountriesValues.length; i++) {\n          if (dataCountriesValues[i].name === country.properties.SOVEREIGNT) {\n            return country.statistic = dataCountriesValues[i];\n          }\n        }\n      });\n    }\n  }, [data, countries]);\n  useEffect(function () {\n    if (countries) {\n      handleLoaded(true);\n    }\n  }, [countries]);\n  var maxCases = 1000000;\n  var colorScale = scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  var getVal = function getVal(feat) {\n    if (feat.statistic) {\n      return feat.statistic.cases / Math.max(1e5, maxCases);\n    } else {\n      return feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n    }\n  };\n\n  var maxVal = useMemo(function () {\n    return countries && Math.max.apply(Math, _toConsumableArray(countries.map(getVal)));\n  }, [countries]);\n  colorScale.domain([0, maxVal]);\n\n  var getLabelString = function getLabelString(properties) {\n    if (!hoverD) {\n      setHoverD(properties);\n    }\n\n    if (properties.statistic) return \"<div> \".concat(properties.statistic.name, \"</div>\\n    \");else return \"\\n      <div>\".concat(properties.properties.NAME_SORT, \"</div>\\n    \");\n  };\n\n  var _onPolygonClick = useCallback(function (feature) {\n    setModalState(true);\n\n    if (feature) {\n      setSelectedCountry(feature);\n    } else {\n      setSelectedCountry(undefined);\n      setModalState(false);\n    }\n  }, [selectedCountry]);\n\n  if (error) {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Something went wrong \");\n  }\n\n  if (!isLoaded) {\n    return __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    });\n  }\n\n  return __jsx(\"div\", {\n    onClick: handleGlobeClick,\n    className: styles.worldMapContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, __jsx(Globe, {\n    globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-dark.jpg\",\n    backgroundImageUrl: \"//unpkg.com/three-globe/example/img/night-sky.png\",\n    polygonsData: countries,\n    polygonAltitude: function polygonAltitude(d) {\n      return d === hoverD ? 0.12 : 0.06;\n    },\n    polygonCapColor: function polygonCapColor(d) {\n      return d === hoverD ? 'steelblue' : colorScale(getVal(d));\n    },\n    polygonStrokeColor: function polygonStrokeColor() {\n      return '#111';\n    },\n    polygonLabel: function polygonLabel(item) {\n      return getLabelString(item);\n    },\n    onPolygonHover: setHoverD,\n    onPolygonClick: function onPolygonClick(r) {\n      return _onPolygonClick(r);\n    },\n    polygonsTransitionDuration: 300,\n    pointOfView: {\n      lat: 42,\n      lng: 12\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }), selectedCountry && selectedCountry.statistic && clickCoordinates && __jsx(CountryInfoModal, {\n    isOpen: isModalOpen,\n    coordinates: {\n      x: clickCoordinates.x,\n      y: clickCoordinates.y\n    },\n    coutryStatistic: selectedCountry.statistic,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }));\n};\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx"],"names":["React","useState","useEffect","useMemo","useCallback","styles","getDataForMap","getD3Data","Loader","Globe","d3","CountryInfoModal","WorldMap","isLoaded","handleLoaded","data","handleData","undefined","error","handleError","countries","setCountries","hoverD","setHoverD","isModalOpen","setModalState","selectedCountry","setSelectedCountry","clickCoordinates","setClickCoordinates","fetchData","featureData","fetchDataForMap","handleGlobeClick","event","console","log","x","clientX","y","clientY","scaleSequentialSqrt","forEach","country","dataCountriesValues","i","length","name","properties","SOVEREIGNT","statistic","maxCases","colorScale","interpolateYlOrRd","getVal","feat","cases","Math","max","GDP_MD_EST","POP_EST","maxVal","map","domain","getLabelString","NAME_SORT","onPolygonClick","feature","worldMapContainer","d","item","r","lat","lng"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useMemo, useCallback } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap, getD3Data } from '../../api';\nimport Loader from '../../components/Loader';\nimport { IVirtualizationResponse, IError, IFeature } from '../../models';\nimport Globe from 'react-globe.gl';\nimport * as d3 from 'd3';\nimport CountryInfoModal from './CountryInfoModal';\n\nconst WorldMap: React.FC = () => {\n  const [isLoaded, handleLoaded] = useState<boolean>(false);\n  const [data, handleData] = useState<IVirtualizationResponse>();\n  const [error, handleError] = useState<IError | undefined>(undefined);\n  const [countries, setCountries] = useState<IFeature[]>();\n  const [hoverD, setHoverD] = useState();\n  const [isModalOpen, setModalState] = useState<boolean>(false);\n  const [selectedCountry, setSelectedCountry] = useState<IFeature>();\n  const [clickCoordinates, setClickCoordinates] = useState<{ x: number; y: number }>();\n\n  const fetchData = async () => {\n    try {\n      const featureData = await getD3Data();\n      setCountries(featureData);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  const fetchDataForMap = async () => {\n    try {\n      const data = await getDataForMap();\n      handleData(data);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  const handleGlobeClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>): void => {\n    console.log(hoverD);\n    if (hoverD) {\n      setSelectedCountry(hoverD);\n      setModalState(true);\n    } else {\n      setModalState(false);\n      setSelectedCountry(undefined);\n    }\n    setClickCoordinates({ ...clickCoordinates, x: event.clientX, y: event.clientY });\n  };\n\n  useEffect(() => {\n    fetchData();\n    fetchDataForMap();\n  }, []);\n\n  const scaleSequentialSqrt = d3['scaleSequentialSqrt'];\n\n  useEffect(() => {\n    if (data && countries) {\n      countries.forEach((country: IFeature) => {\n        const dataCountriesValues = Object.values(data.countries);\n        for (let i = 0; i < dataCountriesValues.length; i++) {\n          if (dataCountriesValues[i].name === country.properties.SOVEREIGNT) {\n            return (country.statistic = dataCountriesValues[i]);\n          }\n        }\n      });\n    }\n  }, [data, countries]);\n\n  useEffect(() => {\n    if (countries) {\n      handleLoaded(true);\n    }\n  }, [countries]);\n\n  const maxCases = 1000000;\n\n  const colorScale = scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  const getVal = (feat: IFeature) => {\n    if (feat.statistic) {\n      return feat.statistic.cases / Math.max(1e5, maxCases);\n    } else {\n      return feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n    }\n  };\n\n  const maxVal = useMemo(() => countries && Math.max(...countries.map(getVal)), [countries]);\n\n  colorScale.domain([0, maxVal]);\n\n  const getLabelString = (properties: IFeature): string => {\n    if (!hoverD) {\n      setHoverD(properties);\n    }\n    if (properties.statistic)\n      return `<div> ${properties.statistic.name}</div>\n    `;\n    else\n      return `\n      <div>${properties.properties.NAME_SORT}</div>\n    `;\n  };\n\n  const onPolygonClick = useCallback(\n    (feature: IFeature) => {\n      setModalState(true);\n      if (feature) {\n        setSelectedCountry(feature);\n      } else {\n        setSelectedCountry(undefined);\n        setModalState(false);\n      }\n    },\n    [selectedCountry]\n  );\n\n  if (error) {\n    return <div>Something went wrong </div>;\n  }\n  if (!isLoaded) {\n    return <Loader />;\n  }\n  return (\n    <div onClick={handleGlobeClick} className={styles.worldMapContainer}>\n      <Globe\n        globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-dark.jpg\"\n        backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n        polygonsData={countries}\n        polygonAltitude={(d) => (d === hoverD ? 0.12 : 0.06)}\n        polygonCapColor={(d) => (d === hoverD ? 'steelblue' : colorScale(getVal(d)))}\n        polygonStrokeColor={() => '#111'}\n        polygonLabel={(item) => getLabelString(item)}\n        onPolygonHover={setHoverD}\n        onPolygonClick={(r) => onPolygonClick(r)}\n        polygonsTransitionDuration={300}\n        pointOfView={{ lat: 42, lng: 12 }}\n      />\n      {selectedCountry && selectedCountry.statistic && clickCoordinates && (\n        <CountryInfoModal\n          isOpen={isModalOpen}\n          coordinates={{ x: clickCoordinates.x, y: clickCoordinates.y }}\n          coutryStatistic={selectedCountry.statistic}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default WorldMap;\n"]},"metadata":{},"sourceType":"module"}