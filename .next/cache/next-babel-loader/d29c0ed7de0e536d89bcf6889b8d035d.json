{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport axios from 'axios';\nexport var apiUrl = 'https://cors-anywhere.herokuapp.com/https://api.the2019ncov.com/api/';\nexport var getAllCases = function getAllCases() {\n  return new _Promise(function _callee(resolve, reject) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  });\n};\naxios;\nexport var getTimeLineNews = function getTimeLineNews() {\n  return new _Promise(function (resolve, reject) {\n    var link = \"\".concat(apiUrl, \"/timeline\");\n    fetch(link).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      return console.log(res);\n    });\n  });\n};","map":{"version":3,"sources":["/Users/roman/Desktop/projects/corona/src/api/index.ts"],"names":["axios","apiUrl","getAllCases","resolve","reject","getTimeLineNews","link","fetch","then","res","json","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,IAAMC,MAAM,GAAG,sEAAf;AAEP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC/B,SAAO,aAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ,CAAP;AACD,CAFM;AAGPJ,KAAK;AAEL,OAAO,IAAMK,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACnC,SAAO,aAAY,UAACF,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAME,IAAI,aAAML,MAAN,cAAV;AACAM,IAAAA,KAAK,CAACD,IAAD,CAAL,CACGE,IADH,CACQ,UAACC,GAAD;AAAA,aAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,KADR,EAEGF,IAFH,CAEQ,UAACC,GAAD;AAAA,aAASE,OAAO,CAACC,GAAR,CAAYH,GAAZ,CAAT;AAAA,KAFR;AAGD,GALM,CAAP;AAMD,CAPM","sourcesContent":["import axios from 'axios';\nexport const apiUrl = 'https://cors-anywhere.herokuapp.com/https://api.the2019ncov.com/api/';\n\nexport const getAllCases = () => {\n  return new Promise(async (resolve, reject) => {});\n};\naxios;\n\nexport const getTimeLineNews = () => {\n  return new Promise((resolve, reject) => {\n    const link = `${apiUrl}/timeline`;\n    fetch(link)\n      .then((res) => res.json())\n      .then((res) => console.log(res));\n  });\n};\n"]},"metadata":{},"sourceType":"module"}