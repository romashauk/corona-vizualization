{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nvar _jsxFileName = \"/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useMemo } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap, getD3Data } from '../../api';\nimport Loader from '../../components/Loader';\nimport Globe from 'react-globe.gl';\nimport * as d3 from 'd3';\n\nconst WorldMap = () => {\n  const {\n    0: isLoaded,\n    1: handleLoaded\n  } = useState(false);\n  const {\n    0: data,\n    1: handleData\n  } = useState();\n  const {\n    0: error,\n    1: handleError\n  } = useState(undefined);\n  const {\n    0: countries,\n    1: setCountries\n  } = useState();\n  const {\n    0: hoverD,\n    1: setHoverD\n  } = useState();\n\n  const fetchData = async () => {\n    try {\n      const data = await getDataForMap();\n      const featureData = await getD3Data();\n      handleData(data);\n      setCountries(featureData);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const scaleSequentialSqrt = d3['scaleSequentialSqrt'];\n  console.log(scaleSequentialSqrt);\n  useEffect(() => {\n    if (data && countries) {\n      countries.forEach(country => {\n        const dataCountriesValues = _Object$values(data.countries);\n\n        for (let i = 0; i < dataCountriesValues.length; i++) {\n          if (dataCountriesValues[i].name === country.properties.SOVEREIGNT) {\n            return country.statistic = dataCountriesValues[i];\n          }\n        }\n      });\n      handleLoaded(true);\n    }\n  }, [data, countries]);\n  const colorScale = scaleSequentialSqrt(d3.interpolateYlOrRd);\n  const maxVal = useMemo(() => countries.length && Math.max(...countries.map(getVal)), [countries]);\n\n  const getVal = feat => feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n\n  colorScale.domain([0, maxVal]);\n\n  const getColor = feature => {\n    if (feature.statistic) {\n      const maxCases = 200000;\n      const multipier = feature.statistic.cases / maxCases;\n      return `rgba(${multipier * 250}, 0, 0, 1)`;\n    } else {\n      return `rgba(200, 0, 0, 0)`;\n    }\n  };\n\n  const getLabelString = properties => {\n    if (properties.statistic) return `<div> ${properties.statistic.name}</div>\n    `;else return `\n      <div>${properties.properties.NAME_SORT}</div>\n    `;\n  };\n\n  if (error) {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Something went wrong \");\n  }\n\n  if (!isLoaded) {\n    return __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    });\n  }\n\n  return __jsx(\"div\", {\n    className: styles.worldMapContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, __jsx(Globe, {\n    globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-dark.jpg\",\n    backgroundImageUrl: \"//unpkg.com/three-globe/example/img/night-sky.png\",\n    polygonsData: countries,\n    polygonAltitude: d => d === hoverD ? 0.12 : 0.06 // polygonCapColor={(d) => getColor(d)}\n    // polygonSideColor={() => 'rgba(0, 100, 0, 0.15)'}\n    ,\n    polygonCapColor: d => d === hoverD ? 'steelblue' : colorScale(getVal(d)),\n    polygonStrokeColor: () => '#111',\n    polygonLabel: item => getLabelString(item),\n    onPolygonHover: setHoverD,\n    onPolygonClick: r => console.log(r),\n    polygonsTransitionDuration: 300,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }));\n};\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx"],"names":["React","useState","useEffect","useMemo","styles","getDataForMap","getD3Data","Loader","Globe","d3","WorldMap","isLoaded","handleLoaded","data","handleData","error","handleError","undefined","countries","setCountries","hoverD","setHoverD","fetchData","featureData","e","scaleSequentialSqrt","console","log","forEach","country","dataCountriesValues","i","length","name","properties","SOVEREIGNT","statistic","colorScale","interpolateYlOrRd","maxVal","Math","max","map","getVal","feat","GDP_MD_EST","POP_EST","domain","getColor","feature","maxCases","multipier","cases","getLabelString","NAME_SORT","worldMapContainer","d","item","r"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useMemo } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap, getD3Data } from '../../api';\nimport Loader from '../../components/Loader';\nimport { IVirtualizationResponse, IError, IFeature } from '../../models';\nimport Globe from 'react-globe.gl';\nimport * as d3 from 'd3';\n\nconst WorldMap: React.FC = () => {\n  const [isLoaded, handleLoaded] = useState<boolean>(false);\n  const [data, handleData] = useState<IVirtualizationResponse>();\n  const [error, handleError] = useState<IError | undefined>(undefined);\n  const [countries, setCountries] = useState<IFeature[]>();\n  const [hoverD, setHoverD] = useState();\n\n  const fetchData = async () => {\n    try {\n      const data = await getDataForMap();\n      const featureData = await getD3Data();\n      handleData(data);\n      setCountries(featureData);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const scaleSequentialSqrt = d3['scaleSequentialSqrt'];\n  console.log(scaleSequentialSqrt);\n  useEffect(() => {\n    if (data && countries) {\n      countries.forEach((country: IFeature) => {\n        const dataCountriesValues = Object.values(data.countries);\n        for (let i = 0; i < dataCountriesValues.length; i++) {\n          if (dataCountriesValues[i].name === country.properties.SOVEREIGNT) {\n            return (country.statistic = dataCountriesValues[i]);\n          }\n        }\n      });\n      handleLoaded(true);\n    }\n  }, [data, countries]);\n\n  const colorScale = scaleSequentialSqrt(d3.interpolateYlOrRd);\n  const maxVal = useMemo(() => countries.length && Math.max(...countries.map(getVal)), [countries]);\n  const getVal = (feat: IFeature) => feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n  colorScale.domain([0, maxVal]);\n\n  const getColor = (feature: IFeature): string => {\n    if (feature.statistic) {\n      const maxCases = 200000;\n      const multipier = feature.statistic.cases / maxCases;\n      return `rgba(${multipier * 250}, 0, 0, 1)`;\n    } else {\n      return `rgba(200, 0, 0, 0)`;\n    }\n  };\n  const getLabelString = (properties: IFeature): string => {\n    if (properties.statistic)\n      return `<div> ${properties.statistic.name}</div>\n    `;\n    else\n      return `\n      <div>${properties.properties.NAME_SORT}</div>\n    `;\n  };\n\n  if (error) {\n    return <div>Something went wrong </div>;\n  }\n  if (!isLoaded) {\n    return <Loader />;\n  }\n  return (\n    <div className={styles.worldMapContainer}>\n      <Globe\n        globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-dark.jpg\"\n        backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n        polygonsData={countries}\n        polygonAltitude={(d) => (d === hoverD ? 0.12 : 0.06)}\n        // polygonCapColor={(d) => getColor(d)}\n        // polygonSideColor={() => 'rgba(0, 100, 0, 0.15)'}\n        polygonCapColor={(d) => (d === hoverD ? 'steelblue' : colorScale(getVal(d)))}\n        polygonStrokeColor={() => '#111'}\n        polygonLabel={(item) => getLabelString(item)}\n        onPolygonHover={setHoverD}\n        onPolygonClick={(r) => console.log(r)}\n        polygonsTransitionDuration={300}\n      />\n    </div>\n  );\n};\n\nexport default WorldMap;\n"]},"metadata":{},"sourceType":"module"}