{"ast":null,"code":"var _jsxFileName = \"/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap } from '../../api';\nimport Loader from '../../components/Loader';\nimport Globe from 'react-globe.gl';\nimport { d3 } from 'd3';\n\nconst WorldMap = () => {\n  const {\n    0: isLoaded,\n    1: handleLoaded\n  } = useState(false);\n  const {\n    0: data,\n    1: handleData\n  } = useState();\n  const {\n    0: error,\n    1: handleError\n  } = useState(undefined);\n\n  const fetchData = async () => {\n    try {\n      const data = await getDataForMap();\n      handleData(data);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n  useEffect(() => {\n    if (data) {\n      handleLoaded(true);\n    }\n  }, [data]);\n\n  if (error) {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"Something went wrong \");\n  }\n\n  if (!isLoaded) {\n    return __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    });\n  }\n\n  return __jsx(\"div\", {\n    className: styles.worldMapContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, __jsx(Globe, {\n    globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-night.jpg\",\n    backgroundImageUrl: \"//unpkg.com/three-globe/example/img/night-sky.png\",\n    polygonsData: countries.features,\n    polygonAltitude: d => d === hoverD ? 0.12 : 0.06,\n    polygonCapColor: d => d === hoverD ? 'steelblue' : colorScale(getVal(d)),\n    polygonSideColor: () => 'rgba(0, 100, 0, 0.15)',\n    polygonStrokeColor: () => '#111',\n    polygonLabel: ({\n      properties: d\n    }) => `\n        <b>${d.ADMIN} (${d.ISO_A2}):</b> <br />\n        GDP: <i>${d.GDP_MD_EST}</i> M$<br/>\n        Population: <i>${d.POP_EST}</i>\n      `,\n    onPolygonHover: setHoverD,\n    polygonsTransitionDuration: 300,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }));\n};\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx"],"names":["React","useState","useEffect","styles","getDataForMap","Loader","Globe","d3","WorldMap","isLoaded","handleLoaded","data","handleData","error","handleError","undefined","fetchData","e","colorScale","scaleSequentialSqrt","interpolateYlOrRd","worldMapContainer","countries","features","d","hoverD","getVal","properties","ADMIN","ISO_A2","GDP_MD_EST","POP_EST","setHoverD"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,EAAT,QAAmB,IAAnB;;AAEA,MAAMC,QAAkB,GAAG,MAAM;AAC/B,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA2BT,QAAQ,CAAU,KAAV,CAAzC;AACA,QAAM;AAAA,OAACU,IAAD;AAAA,OAAOC;AAAP,MAAqBX,QAAQ,EAAnC;AACA,QAAM;AAAA,OAACY,KAAD;AAAA,OAAQC;AAAR,MAAuBb,QAAQ,CAAqBc,SAArB,CAArC;;AAEA,QAAMC,SAAS,GAAG,YAAY;AAC5B,QAAI;AACF,YAAML,IAAI,GAAG,MAAMP,aAAa,EAAhC;AACAQ,MAAAA,UAAU,CAACD,IAAD,CAAV;AACD,KAHD,CAGE,OAAOM,CAAP,EAAU;AACVH,MAAAA,WAAW,CAACG,CAAD,CAAX;AACD;AACF,GAPD;;AASAf,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;AAGA,QAAME,UAAU,GAAGX,EAAE,CAACY,mBAAH,CAAuBZ,EAAE,CAACa,iBAA1B,CAAnB;AAEAlB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,IAAJ,EAAU;AACRD,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF,GAJQ,EAIN,CAACC,IAAD,CAJM,CAAT;;AAMA,MAAIE,KAAJ,EAAW;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAP;AACD;;AACD,MAAI,CAACJ,QAAL,EAAe;AACb,WAAO,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,SACE;AAAK,IAAA,SAAS,EAAEN,MAAM,CAACkB,iBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,aAAa,EAAC,qDADhB;AAEE,IAAA,kBAAkB,EAAC,mDAFrB;AAGE,IAAA,YAAY,EAAEC,SAAS,CAACC,QAH1B;AAIE,IAAA,eAAe,EAAGC,CAAD,IAAQA,CAAC,KAAKC,MAAN,GAAe,IAAf,GAAsB,IAJjD;AAKE,IAAA,eAAe,EAAGD,CAAD,IAAQA,CAAC,KAAKC,MAAN,GAAe,WAAf,GAA6BP,UAAU,CAACQ,MAAM,CAACF,CAAD,CAAP,CALlE;AAME,IAAA,gBAAgB,EAAE,MAAM,uBAN1B;AAOE,IAAA,kBAAkB,EAAE,MAAM,MAP5B;AAQE,IAAA,YAAY,EAAE,CAAC;AAAEG,MAAAA,UAAU,EAAEH;AAAd,KAAD,KAAwB;aACjCA,CAAC,CAACI,KAAM,KAAIJ,CAAC,CAACK,MAAO;kBAChBL,CAAC,CAACM,UAAW;yBACNN,CAAC,CAACO,OAAQ;OAX7B;AAaE,IAAA,cAAc,EAAEC,SAblB;AAcE,IAAA,0BAA0B,EAAE,GAd9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAoBD,CApDD;;AAsDA,eAAexB,QAAf","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap } from '../../api';\nimport Loader from '../../components/Loader';\nimport { IVirtualizationResponse, IError } from '../../models';\nimport Globe from 'react-globe.gl';\nimport { d3 } from 'd3';\n\nconst WorldMap: React.FC = () => {\n  const [isLoaded, handleLoaded] = useState<boolean>(false);\n  const [data, handleData] = useState<IVirtualizationResponse>();\n  const [error, handleError] = useState<IError | undefined>(undefined);\n\n  const fetchData = async () => {\n    try {\n      const data = await getDataForMap();\n      handleData(data);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  useEffect(() => {\n    if (data) {\n      handleLoaded(true);\n    }\n  }, [data]);\n\n  if (error) {\n    return <div>Something went wrong </div>;\n  }\n  if (!isLoaded) {\n    return <Loader />;\n  }\n\n  return (\n    <div className={styles.worldMapContainer}>\n      <Globe\n        globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-night.jpg\"\n        backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n        polygonsData={countries.features}\n        polygonAltitude={(d) => (d === hoverD ? 0.12 : 0.06)}\n        polygonCapColor={(d) => (d === hoverD ? 'steelblue' : colorScale(getVal(d)))}\n        polygonSideColor={() => 'rgba(0, 100, 0, 0.15)'}\n        polygonStrokeColor={() => '#111'}\n        polygonLabel={({ properties: d }) => `\n        <b>${d.ADMIN} (${d.ISO_A2}):</b> <br />\n        GDP: <i>${d.GDP_MD_EST}</i> M$<br/>\n        Population: <i>${d.POP_EST}</i>\n      `}\n        onPolygonHover={setHoverD}\n        polygonsTransitionDuration={300}\n      />\n    </div>\n  );\n};\n\nexport default WorldMap;\n"]},"metadata":{},"sourceType":"module"}