{"ast":null,"code":"var _jsxFileName = \"/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap, getD3Data } from '../../api';\nimport Loader from '../../components/Loader';\nimport Globe from 'react-globe.gl';\n\nconst WorldMap = () => {\n  const {\n    0: isLoaded,\n    1: handleLoaded\n  } = useState(false);\n  const {\n    0: data,\n    1: handleData\n  } = useState();\n  const {\n    0: error,\n    1: handleError\n  } = useState(undefined);\n  const {\n    0: countries,\n    1: setCountries\n  } = useState();\n  const {\n    0: hoverD,\n    1: setHoverD\n  } = useState();\n\n  const fetchData = async () => {\n    try {\n      const data = await getDataForMap();\n      const featureData = await getD3Data();\n      handleData(data);\n      setCountries(featureData);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []); //   const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  useEffect(() => {\n    if (data && countries) {\n      countries.forEach(country => {\n        const currentCountryStatistic = data.countries[country.properties.SOV_A3];\n        console.log(data.countries);\n        console.log(country.properties.SOV_A3);\n      });\n      handleLoaded(true);\n    }\n  }, [data, countries]); // const maxVal = useMemo(() => Math.max(...countries.features.map(getVal)), [countries]);\n  //   const getVal = (feat) => feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n  //   colorScale.domain([0, maxVal]);\n\n  if (error) {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Something went wrong \");\n  }\n\n  if (!isLoaded) {\n    return __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    });\n  }\n\n  console.log();\n  return __jsx(\"div\", {\n    className: styles.worldMapContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, __jsx(Globe, {\n    globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-dark.jpg\",\n    backgroundImageUrl: \"//unpkg.com/three-globe/example/img/night-sky.png\",\n    polygonsData: countries,\n    polygonAltitude: d => d === hoverD ? 0.12 : 0.06 // polygonCapColor={(d) => (d === hoverD ? 'steelblue' : colorScale(getVal(d)))}\n    ,\n    polygonSideColor: () => 'rgba(0, 100, 0, 0.15)',\n    polygonStrokeColor: () => '#111',\n    polygonLabel: ({\n      properties: d\n    }) => `\n        <b>${d.ADMIN} (${d.ISO_A2}):</b> <br />\n        GDP: <i>${d.GDP_MD_EST}</i> M$<br/>\n        Population: <i>${d.POP_EST}</i>\n      `,\n    onPolygonHover: setHoverD,\n    polygonsTransitionDuration: 300,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }));\n};\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx"],"names":["React","useState","useEffect","styles","getDataForMap","getD3Data","Loader","Globe","WorldMap","isLoaded","handleLoaded","data","handleData","error","handleError","undefined","countries","setCountries","hoverD","setHoverD","fetchData","featureData","e","forEach","country","currentCountryStatistic","properties","SOV_A3","console","log","worldMapContainer","d","ADMIN","ISO_A2","GDP_MD_EST","POP_EST"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useMemo } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap, getD3Data } from '../../api';\nimport Loader from '../../components/Loader';\nimport { IVirtualizationResponse, IError, IFeature } from '../../models';\nimport Globe from 'react-globe.gl';\nimport d3 from 'd3';\n\nconst WorldMap: React.FC = () => {\n  const [isLoaded, handleLoaded] = useState<boolean>(false);\n  const [data, handleData] = useState<IVirtualizationResponse>();\n  const [error, handleError] = useState<IError | undefined>(undefined);\n  const [countries, setCountries] = useState<IFeature[]>();\n  const [hoverD, setHoverD] = useState();\n\n  const fetchData = async () => {\n    try {\n      const data = await getDataForMap();\n      const featureData = await getD3Data();\n      handleData(data);\n      setCountries(featureData);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  //   const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  useEffect(() => {\n    if (data && countries) {\n      countries.forEach((country: IFeature) => {\n        const currentCountryStatistic = data.countries[country.properties.SOV_A3];\n        console.log(data.countries);\n        console.log(country.properties.SOV_A3);\n      });\n      handleLoaded(true);\n    }\n  }, [data, countries]);\n  // const maxVal = useMemo(() => Math.max(...countries.features.map(getVal)), [countries]);\n  //   const getVal = (feat) => feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n  //   colorScale.domain([0, maxVal]);\n\n  if (error) {\n    return <div>Something went wrong </div>;\n  }\n  if (!isLoaded) {\n    return <Loader />;\n  }\n  console.log();\n  return (\n    <div className={styles.worldMapContainer}>\n      <Globe\n        globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-dark.jpg\"\n        backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n        polygonsData={countries}\n        polygonAltitude={(d) => (d === hoverD ? 0.12 : 0.06)}\n        // polygonCapColor={(d) => (d === hoverD ? 'steelblue' : colorScale(getVal(d)))}\n        polygonSideColor={() => 'rgba(0, 100, 0, 0.15)'}\n        polygonStrokeColor={() => '#111'}\n        polygonLabel={({ properties: d }) => `\n        <b>${d.ADMIN} (${d.ISO_A2}):</b> <br />\n        GDP: <i>${d.GDP_MD_EST}</i> M$<br/>\n        Population: <i>${d.POP_EST}</i>\n      `}\n        onPolygonHover={setHoverD}\n        polygonsTransitionDuration={300}\n      />\n    </div>\n  );\n};\n\nexport default WorldMap;\n"]},"metadata":{},"sourceType":"module"}