{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap, getD3Data } from '../../api';\nimport Loader from '../../components/Loader';\nimport Globe from 'react-globe.gl';\n\nvar WorldMap = function WorldMap() {\n  var _useState = useState(false),\n      isLoaded = _useState[0],\n      handleLoaded = _useState[1];\n\n  var _useState2 = useState(),\n      data = _useState2[0],\n      handleData = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      error = _useState3[0],\n      handleError = _useState3[1];\n\n  var _useState4 = useState(),\n      countries = _useState4[0],\n      setCountries = _useState4[1];\n\n  var _useState5 = useState(),\n      hoverD = _useState5[0],\n      setHoverD = _useState5[1];\n\n  var fetchData = function fetchData() {\n    var _data, featureData;\n\n    return _regeneratorRuntime.async(function fetchData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getDataForMap());\n\n          case 3:\n            _data = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(getD3Data());\n\n          case 6:\n            featureData = _context.sent;\n            handleData(_data);\n            setCountries(featureData);\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            handleError(_context.t0);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 11]]);\n  };\n\n  useEffect(function () {\n    fetchData();\n  }, []); //   const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  useEffect(function () {\n    if (data && countries) {\n      countries.forEach(function (country) {\n        var dataCountriesValues = _Object$values(data.countries);\n\n        for (var i = 0; i < dataCountriesValues.length; i++) {\n          if (dataCountriesValues[i].name === country.properties.SOVEREIGNT) {\n            return country.statistic = dataCountriesValues[i];\n          }\n        }\n      });\n      handleLoaded(true);\n    }\n  }, [data, countries]); // const maxVal = useMemo(() => Math.max(...countries.features.map(getVal)), [countries]);\n  //   const getVal = (feat) => feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n  //   colorScale.domain([0, maxVal]);\n\n  var getColor = function getColor(feature) {\n    // console.log(feature);\n    return 'rgba(10, 0, 0)';\n  };\n\n  var getLabelString = function getLabelString(properties) {\n    if (properties.statistic) return \"<div> \".concat(properties.statistic.name, \"</div>\\n    \");else return \"\\n      <div>\".concat(properties.properties.NAME_SORT, \"</div>\\n    \");\n  };\n\n  if (error) {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Something went wrong \");\n  }\n\n  if (!isLoaded) {\n    return __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    });\n  }\n\n  return __jsx(\"div\", {\n    className: styles.worldMapContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, __jsx(Globe, {\n    globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-dark.jpg\",\n    backgroundImageUrl: \"//unpkg.com/three-globe/example/img/night-sky.png\",\n    polygonsData: countries,\n    polygonAltitude: function polygonAltitude(d) {\n      return d === hoverD ? 0.12 : 0.06;\n    } // polygonCapColor={(d) => (d === hoverD ? 'steelblue' : colorScale(getVal(d)))}\n    ,\n    polygonSideColor: function polygonSideColor(d) {\n      return getColor(d);\n    },\n    polygonStrokeColor: function polygonStrokeColor() {\n      return '#111';\n    },\n    polygonLabel: function polygonLabel(item) {\n      return getLabelString(item);\n    },\n    onPolygonHover: setHoverD,\n    onPolygonClick: function onPolygonClick(r) {\n      return console.log(r);\n    },\n    polygonsTransitionDuration: 300,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }));\n};\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx"],"names":["React","useState","useEffect","styles","getDataForMap","getD3Data","Loader","Globe","WorldMap","isLoaded","handleLoaded","data","handleData","undefined","error","handleError","countries","setCountries","hoverD","setHoverD","fetchData","featureData","forEach","country","dataCountriesValues","i","length","name","properties","SOVEREIGNT","statistic","getColor","feature","getLabelString","NAME_SORT","worldMapContainer","d","item","r","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useMemo } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap, getD3Data } from '../../api';\nimport Loader from '../../components/Loader';\nimport { IVirtualizationResponse, IError, IFeature } from '../../models';\nimport Globe from 'react-globe.gl';\nimport d3 from 'd3';\n\nconst WorldMap: React.FC = () => {\n  const [isLoaded, handleLoaded] = useState<boolean>(false);\n  const [data, handleData] = useState<IVirtualizationResponse>();\n  const [error, handleError] = useState<IError | undefined>(undefined);\n  const [countries, setCountries] = useState<IFeature[]>();\n  const [hoverD, setHoverD] = useState();\n\n  const fetchData = async () => {\n    try {\n      const data = await getDataForMap();\n      const featureData = await getD3Data();\n      handleData(data);\n      setCountries(featureData);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  //   const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  useEffect(() => {\n    if (data && countries) {\n      countries.forEach((country: IFeature) => {\n        const dataCountriesValues = Object.values(data.countries);\n        for (let i = 0; i < dataCountriesValues.length; i++) {\n          if (dataCountriesValues[i].name === country.properties.SOVEREIGNT) {\n            return (country.statistic = dataCountriesValues[i]);\n          }\n        }\n      });\n      handleLoaded(true);\n    }\n  }, [data, countries]);\n  // const maxVal = useMemo(() => Math.max(...countries.features.map(getVal)), [countries]);\n  //   const getVal = (feat) => feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n  //   colorScale.domain([0, maxVal]);\n\n  const getColor = (feature: IFeature): string => {\n    // console.log(feature);\n    return 'rgba(10, 0, 0)';\n  };\n  const getLabelString = (properties: IFeature): string => {\n    if (properties.statistic)\n      return `<div> ${properties.statistic.name}</div>\n    `;\n    else\n      return `\n      <div>${properties.properties.NAME_SORT}</div>\n    `;\n  };\n\n  if (error) {\n    return <div>Something went wrong </div>;\n  }\n  if (!isLoaded) {\n    return <Loader />;\n  }\n  return (\n    <div className={styles.worldMapContainer}>\n      <Globe\n        globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-dark.jpg\"\n        backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n        polygonsData={countries}\n        polygonAltitude={(d) => (d === hoverD ? 0.12 : 0.06)}\n        // polygonCapColor={(d) => (d === hoverD ? 'steelblue' : colorScale(getVal(d)))}\n        polygonSideColor={(d: IFeature) => getColor(d)}\n        polygonStrokeColor={() => '#111'}\n        polygonLabel={(item) => getLabelString(item)}\n        onPolygonHover={setHoverD}\n        onPolygonClick={(r) => console.log(r)}\n        polygonsTransitionDuration={300}\n      />\n    </div>\n  );\n};\n\nexport default WorldMap;\n"]},"metadata":{},"sourceType":"module"}