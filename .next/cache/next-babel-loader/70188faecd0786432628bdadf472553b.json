{"ast":null,"code":"var _jsxFileName = \"/Users/roman/Desktop/projects/corona/src/containers/MainPage/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { getCountry, getAllCases } from '../../api';\nimport Loader from '../../components/Loader';\n\nconst MainPage = () => {\n  const {\n    0: currentCountry,\n    1: setCountry\n  } = useState('');\n  const {\n    0: allCases,\n    1: setCases\n  } = useState();\n  const {\n    0: error,\n    1: handleError\n  } = useState('');\n  const {\n    0: activeCountry,\n    1: setCurrentCountryInfo\n  } = useState();\n  const {\n    0: isLoaded,\n    1: setLoaded\n  } = useState(false);\n\n  const getUsersCountry = async () => {\n    try {\n      const locationResponse = await getCountry();\n\n      if (locationResponse.status === 'success') {\n        setCountry(locationResponse.country);\n      }\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  const getInfo = async () => {\n    try {\n      const cases = await getAllCases();\n      setCases(cases);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  useEffect(() => {\n    if (activeCountry) {\n      setLoaded(true);\n    }\n  }, [activeCountry]);\n  useEffect(() => {\n    if (allCases && allCases.data.length && currentCountry) {\n      const currentCountryData = allCases.data.find(countryData => countryData['Country/Region'] === currentCountry);\n\n      if (currentCountryData) {\n        setCurrentCountryInfo(currentCountryData);\n      } else {\n        const currentCountryData = allCases.data.find(countryData => countryData['Country/Region'] === 'Ukraine');\n        setCurrentCountryInfo(currentCountryData);\n      }\n    }\n  }, [allCases, currentCountry]);\n  useEffect(() => {\n    getUsersCountry();\n    getInfo();\n  }, []);\n\n  if (!isLoaded) {\n    return __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    });\n  }\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"sadas\");\n};\n\nexport default MainPage;","map":{"version":3,"sources":["/Users/roman/Desktop/projects/corona/src/containers/MainPage/index.tsx"],"names":["React","useState","useEffect","getCountry","getAllCases","Loader","MainPage","currentCountry","setCountry","allCases","setCases","error","handleError","activeCountry","setCurrentCountryInfo","isLoaded","setLoaded","getUsersCountry","locationResponse","status","country","e","getInfo","cases","data","length","currentCountryData","find","countryData"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAsCC,SAAtC,QAAuD,OAAvD;AAEA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,WAAxC;AAEA,OAAOC,MAAP,MAAmB,yBAAnB;;AAEA,MAAMC,QAAkB,GAAG,MAAM;AAC/B,QAAM;AAAA,OAACC,cAAD;AAAA,OAAiBC;AAAjB,MAA+BP,QAAQ,CAAS,EAAT,CAA7C;AACA,QAAM;AAAA,OAACQ,QAAD;AAAA,OAAWC;AAAX,MAAuBT,QAAQ,EAArC;AACA,QAAM;AAAA,OAACU,KAAD;AAAA,OAAQC;AAAR,MAAuBX,QAAQ,CAAS,EAAT,CAArC;AACA,QAAM;AAAA,OAACY,aAAD;AAAA,OAAgBC;AAAhB,MAAyCb,QAAQ,EAAvD;AACA,QAAM;AAAA,OAACc,QAAD;AAAA,OAAWC;AAAX,MAAwBf,QAAQ,CAAU,KAAV,CAAtC;;AAEA,QAAMgB,eAAe,GAAG,YAAY;AAClC,QAAI;AACF,YAAMC,gBAAgB,GAAG,MAAMf,UAAU,EAAzC;;AACA,UAAIe,gBAAgB,CAACC,MAAjB,KAA4B,SAAhC,EAA2C;AACzCX,QAAAA,UAAU,CAACU,gBAAgB,CAACE,OAAlB,CAAV;AACD;AACF,KALD,CAKE,OAAOC,CAAP,EAAU;AACVT,MAAAA,WAAW,CAACS,CAAD,CAAX;AACD;AACF,GATD;;AAUA,QAAMC,OAAO,GAAG,YAAY;AAC1B,QAAI;AACF,YAAMC,KAAK,GAAG,MAAMnB,WAAW,EAA/B;AACAM,MAAAA,QAAQ,CAACa,KAAD,CAAR;AACD,KAHD,CAGE,OAAOF,CAAP,EAAU;AACVT,MAAAA,WAAW,CAACS,CAAD,CAAX;AACD;AACF,GAPD;;AASAnB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,aAAJ,EAAmB;AACjBG,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD;AACF,GAJQ,EAIN,CAACH,aAAD,CAJM,CAAT;AAMAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,QAAQ,IAAIA,QAAQ,CAACe,IAAT,CAAcC,MAA1B,IAAoClB,cAAxC,EAAwD;AACtD,YAAMmB,kBAAkB,GAAGjB,QAAQ,CAACe,IAAT,CAAcG,IAAd,CAAoBC,WAAD,IAAoCA,WAAW,CAAC,gBAAD,CAAX,KAAkCrB,cAAzF,CAA3B;;AACA,UAAImB,kBAAJ,EAAwB;AACtBZ,QAAAA,qBAAqB,CAACY,kBAAD,CAArB;AACD,OAFD,MAEO;AACL,cAAMA,kBAAkB,GAAGjB,QAAQ,CAACe,IAAT,CAAcG,IAAd,CAAoBC,WAAD,IAAoCA,WAAW,CAAC,gBAAD,CAAX,KAAkC,SAAzF,CAA3B;AACAd,QAAAA,qBAAqB,CAACY,kBAAD,CAArB;AACD;AACF;AACF,GAVQ,EAUN,CAACjB,QAAD,EAAWF,cAAX,CAVM,CAAT;AAYAL,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,eAAe;AACfK,IAAAA,OAAO;AACR,GAHQ,EAGN,EAHM,CAAT;;AAIA,MAAI,CAACP,QAAL,EAAe;AACb,WAAO,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACD,CArDD;;AAuDA,eAAeT,QAAf","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport styles from './styles.module.scss';\nimport { getCountry, getAllCases } from '../../api';\nimport { ICountryStatistic, IDateStatistic } from '../../models';\nimport Loader from '../../components/Loader';\n\nconst MainPage: React.FC = () => {\n  const [currentCountry, setCountry] = useState<string>('');\n  const [allCases, setCases] = useState<IDateStatistic>();\n  const [error, handleError] = useState<string>('');\n  const [activeCountry, setCurrentCountryInfo] = useState<ICountryStatistic>();\n  const [isLoaded, setLoaded] = useState<boolean>(false);\n\n  const getUsersCountry = async () => {\n    try {\n      const locationResponse = await getCountry();\n      if (locationResponse.status === 'success') {\n        setCountry(locationResponse.country);\n      }\n    } catch (e) {\n      handleError(e);\n    }\n  };\n  const getInfo = async () => {\n    try {\n      const cases = await getAllCases();\n      setCases(cases);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  useEffect(() => {\n    if (activeCountry) {\n      setLoaded(true);\n    }\n  }, [activeCountry]);\n\n  useEffect(() => {\n    if (allCases && allCases.data.length && currentCountry) {\n      const currentCountryData = allCases.data.find((countryData: ICountryStatistic) => countryData['Country/Region'] === currentCountry);\n      if (currentCountryData) {\n        setCurrentCountryInfo(currentCountryData);\n      } else {\n        const currentCountryData = allCases.data.find((countryData: ICountryStatistic) => countryData['Country/Region'] === 'Ukraine');\n        setCurrentCountryInfo(currentCountryData);\n      }\n    }\n  }, [allCases, currentCountry]);\n\n  useEffect(() => {\n    getUsersCountry();\n    getInfo();\n  }, []);\n  if (!isLoaded) {\n    return <Loader />;\n  }\n\n  return <div>sadas</div>;\n};\n\nexport default MainPage;\n"]},"metadata":{},"sourceType":"module"}