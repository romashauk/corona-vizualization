{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nvar _jsxFileName = \"/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap, getD3Data } from '../../api';\nimport Loader from '../../components/Loader';\nimport Globe from 'react-globe.gl';\n\nconst WorldMap = () => {\n  const {\n    0: isLoaded,\n    1: handleLoaded\n  } = useState(false);\n  const {\n    0: data,\n    1: handleData\n  } = useState();\n  const {\n    0: error,\n    1: handleError\n  } = useState(undefined);\n  const {\n    0: countries,\n    1: setCountries\n  } = useState();\n  const {\n    0: hoverD,\n    1: setHoverD\n  } = useState();\n\n  const fetchData = async () => {\n    try {\n      const data = await getDataForMap();\n      const featureData = await getD3Data();\n      handleData(data);\n      setCountries(featureData);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []); //   const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  useEffect(() => {\n    if (data && countries) {\n      countries.forEach(country => {\n        const dataCountriesValues = _Object$values(data.countries);\n\n        for (let i = 0; i < dataCountriesValues.length; i++) {\n          if (dataCountriesValues[i].name === country.properties.SOVEREIGNT) {\n            return country.statistic = dataCountriesValues[i];\n          }\n        }\n      });\n      console.log(countries);\n      handleLoaded(true);\n    }\n  }, [data, countries]); // const maxVal = useMemo(() => Math.max(...countries.features.map(getVal)), [countries]);\n  //   const getVal = (feat) => feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n  //   colorScale.domain([0, maxVal]);\n\n  const getLabelString = properties => {\n    console.log(properties);\n    return `\n      <div style='background: red'> 123</div>\n    `;\n  };\n\n  if (error) {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Something went wrong \");\n  }\n\n  if (!isLoaded) {\n    return __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    });\n  }\n\n  return __jsx(\"div\", {\n    className: styles.worldMapContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, __jsx(Globe, {\n    globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-dark.jpg\",\n    backgroundImageUrl: \"//unpkg.com/three-globe/example/img/night-sky.png\",\n    polygonsData: countries,\n    polygonAltitude: d => d === hoverD ? 0.12 : 0.06 // polygonCapColor={(d) => (d === hoverD ? 'steelblue' : colorScale(getVal(d)))}\n    ,\n    polygonSideColor: () => 'rgba(0, 100, 0, 0.15)',\n    polygonStrokeColor: () => '#111',\n    polygonLabel: item => getLabelString(item),\n    onPolygonHover: setHoverD,\n    polygonsTransitionDuration: 300,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }));\n};\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx"],"names":["React","useState","useEffect","styles","getDataForMap","getD3Data","Loader","Globe","WorldMap","isLoaded","handleLoaded","data","handleData","error","handleError","undefined","countries","setCountries","hoverD","setHoverD","fetchData","featureData","e","forEach","country","dataCountriesValues","i","length","name","properties","SOVEREIGNT","statistic","console","log","getLabelString","worldMapContainer","d","item"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useMemo } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap, getD3Data } from '../../api';\nimport Loader from '../../components/Loader';\nimport { IVirtualizationResponse, IError, IFeature } from '../../models';\nimport Globe from 'react-globe.gl';\nimport d3 from 'd3';\n\nconst WorldMap: React.FC = () => {\n  const [isLoaded, handleLoaded] = useState<boolean>(false);\n  const [data, handleData] = useState<IVirtualizationResponse>();\n  const [error, handleError] = useState<IError | undefined>(undefined);\n  const [countries, setCountries] = useState<IFeature[]>();\n  const [hoverD, setHoverD] = useState();\n\n  const fetchData = async () => {\n    try {\n      const data = await getDataForMap();\n      const featureData = await getD3Data();\n      handleData(data);\n      setCountries(featureData);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  //   const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  useEffect(() => {\n    if (data && countries) {\n      countries.forEach((country: IFeature) => {\n        const dataCountriesValues = Object.values(data.countries);\n        for (let i = 0; i < dataCountriesValues.length; i++) {\n          if (dataCountriesValues[i].name === country.properties.SOVEREIGNT) {\n            return (country.statistic = dataCountriesValues[i]);\n          }\n        }\n      });\n      console.log(countries);\n      handleLoaded(true);\n    }\n  }, [data, countries]);\n  // const maxVal = useMemo(() => Math.max(...countries.features.map(getVal)), [countries]);\n  //   const getVal = (feat) => feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n  //   colorScale.domain([0, maxVal]);\n\n  const getLabelString = (properties: IFeature): string => {\n    console.log(properties);\n    return `\n      <div style='background: red'> 123</div>\n    `;\n  };\n\n  if (error) {\n    return <div>Something went wrong </div>;\n  }\n  if (!isLoaded) {\n    return <Loader />;\n  }\n  return (\n    <div className={styles.worldMapContainer}>\n      <Globe\n        globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-dark.jpg\"\n        backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n        polygonsData={countries}\n        polygonAltitude={(d) => (d === hoverD ? 0.12 : 0.06)}\n        // polygonCapColor={(d) => (d === hoverD ? 'steelblue' : colorScale(getVal(d)))}\n        polygonSideColor={() => 'rgba(0, 100, 0, 0.15)'}\n        polygonStrokeColor={() => '#111'}\n        polygonLabel={(item) => getLabelString(item)}\n        onPolygonHover={setHoverD}\n        polygonsTransitionDuration={300}\n      />\n    </div>\n  );\n};\n\nexport default WorldMap;\n"]},"metadata":{},"sourceType":"module"}