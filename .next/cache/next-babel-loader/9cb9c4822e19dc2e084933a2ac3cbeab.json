{"ast":null,"code":"var _jsxFileName = \"/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useMemo } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap } from '../../api';\nimport Loader from '../../components/Loader';\nimport Globe from 'react-globe.gl';\nimport d3 from 'd3';\n\nconst WorldMap = () => {\n  const {\n    0: isLoaded,\n    1: handleLoaded\n  } = useState(false);\n  const {\n    0: data,\n    1: handleData\n  } = useState();\n  const {\n    0: error,\n    1: handleError\n  } = useState(undefined);\n  const {\n    0: hoverD,\n    1: setHoverD\n  } = useState();\n\n  const fetchData = async () => {\n    try {\n      const data = await getDataForMap();\n      handleData(data);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n  useEffect(() => {\n    if (data) {\n      handleLoaded(true);\n    }\n  }, [data]);\n  const maxVal = useMemo(() => Math.max(...countries.features.map(getVal)), [countries]);\n\n  const getVal = feat => feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n\n  colorScale.domain([0, maxVal]);\n\n  if (error) {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Something went wrong \");\n  }\n\n  if (!isLoaded) {\n    return __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    });\n  }\n\n  return __jsx(\"div\", {\n    className: styles.worldMapContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(Globe, {\n    globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-night.jpg\",\n    backgroundImageUrl: \"//unpkg.com/three-globe/example/img/night-sky.png\" // polygonsData={countries.features}\n    // polygonAltitude={(d) => (d === hoverD ? 0.12 : 0.06)}\n    // polygonCapColor={(d) => (d === hoverD ? 'steelblue' : colorScale(getVal(d)))}\n    ,\n    polygonSideColor: () => 'rgba(0, 100, 0, 0.15)',\n    polygonStrokeColor: () => '#111',\n    polygonLabel: ({\n      properties: d\n    }) => `\n        <b>${d.ADMIN} (${d.ISO_A2}):</b> <br />\n        GDP: <i>${d.GDP_MD_EST}</i> M$<br/>\n        Population: <i>${d.POP_EST}</i>\n      `,\n    onPolygonHover: setHoverD,\n    polygonsTransitionDuration: 300,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }));\n};\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx"],"names":["React","useState","useEffect","useMemo","styles","getDataForMap","Loader","Globe","d3","WorldMap","isLoaded","handleLoaded","data","handleData","error","handleError","undefined","hoverD","setHoverD","fetchData","e","colorScale","scaleSequentialSqrt","interpolateYlOrRd","maxVal","Math","max","countries","features","map","getVal","feat","properties","GDP_MD_EST","POP_EST","domain","worldMapContainer","d","ADMIN","ISO_A2"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAsCC,SAAtC,EAAiDC,OAAjD,QAAgE,OAAhE;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;;AAEA,MAAMC,QAAkB,GAAG,MAAM;AAC/B,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA2BV,QAAQ,CAAU,KAAV,CAAzC;AACA,QAAM;AAAA,OAACW,IAAD;AAAA,OAAOC;AAAP,MAAqBZ,QAAQ,EAAnC;AACA,QAAM;AAAA,OAACa,KAAD;AAAA,OAAQC;AAAR,MAAuBd,QAAQ,CAAqBe,SAArB,CAArC;AACA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBjB,QAAQ,EAApC;;AAEA,QAAMkB,SAAS,GAAG,YAAY;AAC5B,QAAI;AACF,YAAMP,IAAI,GAAG,MAAMP,aAAa,EAAhC;AACAQ,MAAAA,UAAU,CAACD,IAAD,CAAV;AACD,KAHD,CAGE,OAAOQ,CAAP,EAAU;AACVL,MAAAA,WAAW,CAACK,CAAD,CAAX;AACD;AACF,GAPD;;AASAlB,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;AAGA,QAAME,UAAU,GAAGb,EAAE,CAACc,mBAAH,CAAuBd,EAAE,CAACe,iBAA1B,CAAnB;AAEArB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,IAAJ,EAAU;AACRD,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF,GAJQ,EAIN,CAACC,IAAD,CAJM,CAAT;AAKA,QAAMY,MAAM,GAAGrB,OAAO,CAAC,MAAMsB,IAAI,CAACC,GAAL,CAAS,GAAGC,SAAS,CAACC,QAAV,CAAmBC,GAAnB,CAAuBC,MAAvB,CAAZ,CAAP,EAAoD,CAACH,SAAD,CAApD,CAAtB;;AACA,QAAMG,MAAM,GAAIC,IAAD,IAAUA,IAAI,CAACC,UAAL,CAAgBC,UAAhB,GAA6BR,IAAI,CAACC,GAAL,CAAS,GAAT,EAAcK,IAAI,CAACC,UAAL,CAAgBE,OAA9B,CAAtD;;AACAb,EAAAA,UAAU,CAACc,MAAX,CAAkB,CAAC,CAAD,EAAIX,MAAJ,CAAlB;;AAEA,MAAIV,KAAJ,EAAW;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAP;AACD;;AACD,MAAI,CAACJ,QAAL,EAAe;AACb,WAAO,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,SACE;AAAK,IAAA,SAAS,EAAEN,MAAM,CAACgC,iBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,aAAa,EAAC,qDADhB;AAEE,IAAA,kBAAkB,EAAC,mDAFrB,CAGE;AACA;AACA;AALF;AAME,IAAA,gBAAgB,EAAE,MAAM,uBAN1B;AAOE,IAAA,kBAAkB,EAAE,MAAM,MAP5B;AAQE,IAAA,YAAY,EAAE,CAAC;AAAEJ,MAAAA,UAAU,EAAEK;AAAd,KAAD,KAAwB;aACjCA,CAAC,CAACC,KAAM,KAAID,CAAC,CAACE,MAAO;kBAChBF,CAAC,CAACJ,UAAW;yBACNI,CAAC,CAACH,OAAQ;OAX7B;AAaE,IAAA,cAAc,EAAEhB,SAblB;AAcE,IAAA,0BAA0B,EAAE,GAd9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAoBD,CAxDD;;AA0DA,eAAeT,QAAf","sourcesContent":["import React, { useState, useContext, useEffect, useMemo } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap } from '../../api';\nimport Loader from '../../components/Loader';\nimport { IVirtualizationResponse, IError } from '../../models';\nimport Globe from 'react-globe.gl';\nimport d3 from 'd3';\n\nconst WorldMap: React.FC = () => {\n  const [isLoaded, handleLoaded] = useState<boolean>(false);\n  const [data, handleData] = useState<IVirtualizationResponse>();\n  const [error, handleError] = useState<IError | undefined>(undefined);\n  const [hoverD, setHoverD] = useState();\n\n  const fetchData = async () => {\n    try {\n      const data = await getDataForMap();\n      handleData(data);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  useEffect(() => {\n    if (data) {\n      handleLoaded(true);\n    }\n  }, [data]);\n  const maxVal = useMemo(() => Math.max(...countries.features.map(getVal)), [countries]);\n  const getVal = (feat) => feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n  colorScale.domain([0, maxVal]);\n\n  if (error) {\n    return <div>Something went wrong </div>;\n  }\n  if (!isLoaded) {\n    return <Loader />;\n  }\n\n  return (\n    <div className={styles.worldMapContainer}>\n      <Globe\n        globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-night.jpg\"\n        backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n        // polygonsData={countries.features}\n        // polygonAltitude={(d) => (d === hoverD ? 0.12 : 0.06)}\n        // polygonCapColor={(d) => (d === hoverD ? 'steelblue' : colorScale(getVal(d)))}\n        polygonSideColor={() => 'rgba(0, 100, 0, 0.15)'}\n        polygonStrokeColor={() => '#111'}\n        polygonLabel={({ properties: d }) => `\n        <b>${d.ADMIN} (${d.ISO_A2}):</b> <br />\n        GDP: <i>${d.GDP_MD_EST}</i> M$<br/>\n        Population: <i>${d.POP_EST}</i>\n      `}\n        onPolygonHover={setHoverD}\n        polygonsTransitionDuration={300}\n      />\n    </div>\n  );\n};\n\nexport default WorldMap;\n"]},"metadata":{},"sourceType":"module"}