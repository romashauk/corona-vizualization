{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nvar _jsxFileName = \"/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useMemo } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap, getD3Data } from '../../api';\nimport Loader from '../../components/Loader';\nimport Globe from 'react-globe.gl';\nimport * as d3 from 'd3';\nimport CountryInfoModal from './CountryInfoModal';\n\nconst WorldMap = () => {\n  const {\n    0: isLoaded,\n    1: handleLoaded\n  } = useState(false);\n  const {\n    0: data,\n    1: handleData\n  } = useState();\n  const {\n    0: error,\n    1: handleError\n  } = useState(undefined);\n  const {\n    0: countries,\n    1: setCountries\n  } = useState();\n  const {\n    0: hoverD,\n    1: setHoverD\n  } = useState();\n  const {\n    0: isModalOpen,\n    1: setModalState\n  } = useState(false);\n  const {\n    0: selectedCountry,\n    1: setSelectedCountry\n  } = useState();\n  const {\n    0: clickCoordinates,\n    1: setClickCoordinates\n  } = useState();\n\n  const fetchData = async () => {\n    try {\n      const data = await getDataForMap();\n      const featureData = await getD3Data();\n      handleData(data);\n      setCountries(featureData);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  const handleGlobeClick = event => {\n    console.log(event);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const scaleSequentialSqrt = d3['scaleSequentialSqrt'];\n  useEffect(() => {\n    if (data && countries) {\n      countries.forEach(country => {\n        const dataCountriesValues = _Object$values(data.countries);\n\n        for (let i = 0; i < dataCountriesValues.length; i++) {\n          if (dataCountriesValues[i].name === country.properties.SOVEREIGNT) {\n            return country.statistic = dataCountriesValues[i];\n          }\n        }\n      });\n      handleLoaded(true);\n    }\n  }, [data, countries]);\n  const maxCases = 1000000;\n  const colorScale = scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  const getVal = feat => {\n    if (feat.statistic) {\n      return feat.statistic.cases / Math.max(1e5, maxCases);\n    } else {\n      return feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n    }\n  };\n\n  const maxVal = useMemo(() => countries && Math.max(...countries.map(getVal)), [countries]);\n  colorScale.domain([0, maxVal]);\n\n  const getLabelString = properties => {\n    if (properties.statistic) return `<div> ${properties.statistic.name}</div>\n    `;else return `\n      <div>${properties.properties.NAME_SORT}</div>\n    `;\n  };\n\n  const onPolygonClick = feature => {\n    setModalState(true);\n\n    if (feature) {\n      setSelectedCountry(feature);\n    }\n  };\n\n  if (error) {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Something went wrong \");\n  }\n\n  if (!isLoaded) {\n    return __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    });\n  }\n\n  return __jsx(\"div\", {\n    onClick: handleGlobeClick,\n    className: styles.worldMapContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, __jsx(Globe, {\n    globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-dark.jpg\",\n    backgroundImageUrl: \"//unpkg.com/three-globe/example/img/night-sky.png\",\n    polygonsData: countries,\n    polygonAltitude: d => d === hoverD ? 0.12 : 0.06,\n    polygonCapColor: d => d === hoverD ? 'steelblue' : colorScale(getVal(d)),\n    polygonStrokeColor: () => '#111',\n    polygonLabel: item => getLabelString(item),\n    onPolygonHover: setHoverD,\n    onPolygonClick: r => onPolygonClick(r),\n    polygonsTransitionDuration: 300,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), selectedCountry && selectedCountry.statistic && __jsx(CountryInfoModal, {\n    isOpen: isModalOpen,\n    coordinates: {\n      x: 10,\n      y: 10\n    },\n    coutryStatistic: selectedCountry.statistic,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }));\n};\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx"],"names":["React","useState","useEffect","useMemo","styles","getDataForMap","getD3Data","Loader","Globe","d3","CountryInfoModal","WorldMap","isLoaded","handleLoaded","data","handleData","error","handleError","undefined","countries","setCountries","hoverD","setHoverD","isModalOpen","setModalState","selectedCountry","setSelectedCountry","clickCoordinates","setClickCoordinates","fetchData","featureData","e","handleGlobeClick","event","console","log","scaleSequentialSqrt","forEach","country","dataCountriesValues","i","length","name","properties","SOVEREIGNT","statistic","maxCases","colorScale","interpolateYlOrRd","getVal","feat","cases","Math","max","GDP_MD_EST","POP_EST","maxVal","map","domain","getLabelString","NAME_SORT","onPolygonClick","feature","worldMapContainer","d","item","r","x","y"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useMemo } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap, getD3Data } from '../../api';\nimport Loader from '../../components/Loader';\nimport { IVirtualizationResponse, IError, IFeature } from '../../models';\nimport Globe from 'react-globe.gl';\nimport * as d3 from 'd3';\nimport CountryInfoModal from './CountryInfoModal';\n\nconst WorldMap: React.FC = () => {\n  const [isLoaded, handleLoaded] = useState<boolean>(false);\n  const [data, handleData] = useState<IVirtualizationResponse>();\n  const [error, handleError] = useState<IError | undefined>(undefined);\n  const [countries, setCountries] = useState<IFeature[]>();\n  const [hoverD, setHoverD] = useState();\n  const [isModalOpen, setModalState] = useState<boolean>(false);\n  const [selectedCountry, setSelectedCountry] = useState<IFeature>();\n  const [clickCoordinates, setClickCoordinates] = useState<{ x: number; y: number }>();\n\n  const fetchData = async () => {\n    try {\n      const data = await getDataForMap();\n      const featureData = await getD3Data();\n      handleData(data);\n      setCountries(featureData);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  const handleGlobeClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>): void => {\n    console.log(event);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const scaleSequentialSqrt = d3['scaleSequentialSqrt'];\n\n  useEffect(() => {\n    if (data && countries) {\n      countries.forEach((country: IFeature) => {\n        const dataCountriesValues = Object.values(data.countries);\n        for (let i = 0; i < dataCountriesValues.length; i++) {\n          if (dataCountriesValues[i].name === country.properties.SOVEREIGNT) {\n            return (country.statistic = dataCountriesValues[i]);\n          }\n        }\n      });\n      handleLoaded(true);\n    }\n  }, [data, countries]);\n\n  const maxCases = 1000000;\n\n  const colorScale = scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  const getVal = (feat: IFeature) => {\n    if (feat.statistic) {\n      return feat.statistic.cases / Math.max(1e5, maxCases);\n    } else {\n      return feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n    }\n  };\n\n  const maxVal = useMemo(() => countries && Math.max(...countries.map(getVal)), [countries]);\n\n  colorScale.domain([0, maxVal]);\n\n  const getLabelString = (properties: IFeature): string => {\n    if (properties.statistic)\n      return `<div> ${properties.statistic.name}</div>\n    `;\n    else\n      return `\n      <div>${properties.properties.NAME_SORT}</div>\n    `;\n  };\n\n  const onPolygonClick = (feature: IFeature) => {\n    setModalState(true);\n    if (feature) {\n      setSelectedCountry(feature);\n    }\n  };\n\n  if (error) {\n    return <div>Something went wrong </div>;\n  }\n  if (!isLoaded) {\n    return <Loader />;\n  }\n  return (\n    <div onClick={handleGlobeClick} className={styles.worldMapContainer}>\n      <Globe\n        globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-dark.jpg\"\n        backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n        polygonsData={countries}\n        polygonAltitude={(d) => (d === hoverD ? 0.12 : 0.06)}\n        polygonCapColor={(d) => (d === hoverD ? 'steelblue' : colorScale(getVal(d)))}\n        polygonStrokeColor={() => '#111'}\n        polygonLabel={(item) => getLabelString(item)}\n        onPolygonHover={setHoverD}\n        onPolygonClick={(r) => onPolygonClick(r)}\n        polygonsTransitionDuration={300}\n      />\n      {selectedCountry && selectedCountry.statistic && (\n        <CountryInfoModal isOpen={isModalOpen} coordinates={{ x: 10, y: 10 }} coutryStatistic={selectedCountry.statistic} />\n      )}\n    </div>\n  );\n};\n\nexport default WorldMap;\n"]},"metadata":{},"sourceType":"module"}