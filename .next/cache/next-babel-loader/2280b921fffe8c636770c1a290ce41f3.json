{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useMemo } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap } from '../../api';\nimport Loader from '../../components/Loader';\nimport Globe from 'react-globe.gl';\nimport d3 from 'd3';\n\nvar WorldMap = function WorldMap() {\n  var _useState = useState(false),\n      isLoaded = _useState[0],\n      handleLoaded = _useState[1];\n\n  var _useState2 = useState(),\n      data = _useState2[0],\n      handleData = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      error = _useState3[0],\n      handleError = _useState3[1];\n\n  var fetchData = function fetchData() {\n    var _data;\n\n    return _regeneratorRuntime.async(function fetchData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getDataForMap());\n\n          case 3:\n            _data = _context.sent;\n            handleData(_data);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            handleError(_context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]]);\n  };\n\n  useEffect(function () {\n    fetchData();\n  }, []);\n  var colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n  useEffect(function () {\n    if (data) {\n      handleLoaded(true);\n    }\n  }, [data]);\n  var maxVal = useMemo(function () {\n    return Math.max.apply(Math, _toConsumableArray(countries.features.map(getVal)));\n  }, [countries]);\n  colorScale.domain([0, maxVal]);\n\n  if (error) {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Something went wrong \");\n  }\n\n  if (!isLoaded) {\n    return __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    });\n  }\n\n  return __jsx(\"div\", {\n    className: styles.worldMapContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, __jsx(Globe, {\n    globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-night.jpg\",\n    backgroundImageUrl: \"//unpkg.com/three-globe/example/img/night-sky.png\" // polygonsData={countries.features}\n    // polygonAltitude={(d) => (d === hoverD ? 0.12 : 0.06)}\n    // polygonCapColor={(d) => (d === hoverD ? 'steelblue' : colorScale(getVal(d)))}\n    ,\n    polygonSideColor: function polygonSideColor() {\n      return 'rgba(0, 100, 0, 0.15)';\n    },\n    polygonStrokeColor: function polygonStrokeColor() {\n      return '#111';\n    },\n    polygonLabel: function polygonLabel(_ref) {\n      var d = _ref.properties;\n      return \"\\n        <b>\".concat(d.ADMIN, \" (\").concat(d.ISO_A2, \"):</b> <br />\\n        GDP: <i>\").concat(d.GDP_MD_EST, \"</i> M$<br/>\\n        Population: <i>\").concat(d.POP_EST, \"</i>\\n      \");\n    },\n    onPolygonHover: setHoverD,\n    polygonsTransitionDuration: 300,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }));\n};\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx"],"names":["React","useState","useEffect","useMemo","styles","getDataForMap","Loader","Globe","d3","WorldMap","isLoaded","handleLoaded","data","handleData","undefined","error","handleError","fetchData","colorScale","scaleSequentialSqrt","interpolateYlOrRd","maxVal","Math","max","countries","features","map","getVal","domain","worldMapContainer","d","properties","ADMIN","ISO_A2","GDP_MD_EST","POP_EST","setHoverD"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAsCC,SAAtC,EAAiDC,OAAjD,QAAgE,OAAhE;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;;AAEA,IAAMC,QAAkB,GAAG,SAArBA,QAAqB,GAAM;AAAA,kBACER,QAAQ,CAAU,KAAV,CADV;AAAA,MACxBS,QADwB;AAAA,MACdC,YADc;;AAAA,mBAEJV,QAAQ,EAFJ;AAAA,MAExBW,IAFwB;AAAA,MAElBC,UAFkB;;AAAA,mBAGFZ,QAAQ,CAAqBa,SAArB,CAHN;AAAA,MAGxBC,KAHwB;AAAA,MAGjBC,WAHiB;;AAK/B,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEKZ,aAAa,EAFlB;;AAAA;AAERO,YAAAA,KAFQ;AAGdC,YAAAA,UAAU,CAACD,KAAD,CAAV;AAHc;AAAA;;AAAA;AAAA;AAAA;AAKdI,YAAAA,WAAW,aAAX;;AALc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AASAd,EAAAA,SAAS,CAAC,YAAM;AACde,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;AAGA,MAAMC,UAAU,GAAGV,EAAE,CAACW,mBAAH,CAAuBX,EAAE,CAACY,iBAA1B,CAAnB;AAEAlB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIU,IAAJ,EAAU;AACRD,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF,GAJQ,EAIN,CAACC,IAAD,CAJM,CAAT;AAKA,MAAMS,MAAM,GAAGlB,OAAO,CAAC;AAAA,WAAMmB,IAAI,CAACC,GAAL,OAAAD,IAAI,qBAAQE,SAAS,CAACC,QAAV,CAAmBC,GAAnB,CAAuBC,MAAvB,CAAR,EAAV;AAAA,GAAD,EAAoD,CAACH,SAAD,CAApD,CAAtB;AACAN,EAAAA,UAAU,CAACU,MAAX,CAAkB,CAAC,CAAD,EAAIP,MAAJ,CAAlB;;AAEA,MAAIN,KAAJ,EAAW;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAP;AACD;;AACD,MAAI,CAACL,QAAL,EAAe;AACb,WAAO,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,SACE;AAAK,IAAA,SAAS,EAAEN,MAAM,CAACyB,iBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,aAAa,EAAC,qDADhB;AAEE,IAAA,kBAAkB,EAAC,mDAFrB,CAGE;AACA;AACA;AALF;AAME,IAAA,gBAAgB,EAAE;AAAA,aAAM,uBAAN;AAAA,KANpB;AAOE,IAAA,kBAAkB,EAAE;AAAA,aAAM,MAAN;AAAA,KAPtB;AAQE,IAAA,YAAY,EAAE;AAAA,UAAeC,CAAf,QAAGC,UAAH;AAAA,oCACTD,CAAC,CAACE,KADO,eACGF,CAAC,CAACG,MADL,4CAEJH,CAAC,CAACI,UAFE,kDAGGJ,CAAC,CAACK,OAHL;AAAA,KARhB;AAaE,IAAA,cAAc,EAAEC,SAblB;AAcE,IAAA,0BAA0B,EAAE,GAd9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAoBD,CAtDD;;AAwDA,eAAe3B,QAAf","sourcesContent":["import React, { useState, useContext, useEffect, useMemo } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap } from '../../api';\nimport Loader from '../../components/Loader';\nimport { IVirtualizationResponse, IError } from '../../models';\nimport Globe from 'react-globe.gl';\nimport d3 from 'd3';\n\nconst WorldMap: React.FC = () => {\n  const [isLoaded, handleLoaded] = useState<boolean>(false);\n  const [data, handleData] = useState<IVirtualizationResponse>();\n  const [error, handleError] = useState<IError | undefined>(undefined);\n\n  const fetchData = async () => {\n    try {\n      const data = await getDataForMap();\n      handleData(data);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  useEffect(() => {\n    if (data) {\n      handleLoaded(true);\n    }\n  }, [data]);\n  const maxVal = useMemo(() => Math.max(...countries.features.map(getVal)), [countries]);\n  colorScale.domain([0, maxVal]);\n\n  if (error) {\n    return <div>Something went wrong </div>;\n  }\n  if (!isLoaded) {\n    return <Loader />;\n  }\n\n  return (\n    <div className={styles.worldMapContainer}>\n      <Globe\n        globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-night.jpg\"\n        backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n        // polygonsData={countries.features}\n        // polygonAltitude={(d) => (d === hoverD ? 0.12 : 0.06)}\n        // polygonCapColor={(d) => (d === hoverD ? 'steelblue' : colorScale(getVal(d)))}\n        polygonSideColor={() => 'rgba(0, 100, 0, 0.15)'}\n        polygonStrokeColor={() => '#111'}\n        polygonLabel={({ properties: d }) => `\n        <b>${d.ADMIN} (${d.ISO_A2}):</b> <br />\n        GDP: <i>${d.GDP_MD_EST}</i> M$<br/>\n        Population: <i>${d.POP_EST}</i>\n      `}\n        onPolygonHover={setHoverD}\n        polygonsTransitionDuration={300}\n      />\n    </div>\n  );\n};\n\nexport default WorldMap;\n"]},"metadata":{},"sourceType":"module"}