{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useState, useRef, useEffect, useMemo, useCallback } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap, getD3Data } from '../../api';\nimport Loader from '../../components/Loader';\nimport Globe from 'react-globe.gl';\nimport * as d3 from 'd3';\nimport CountryInfoModal from './CountryInfoModal';\n\nvar WorldMap = function WorldMap() {\n  var globeEl = useRef(null);\n\n  var _useState = useState(false),\n      isLoaded = _useState[0],\n      handleLoaded = _useState[1];\n\n  var _useState2 = useState(),\n      data = _useState2[0],\n      handleData = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      error = _useState3[0],\n      handleError = _useState3[1];\n\n  var _useState4 = useState(),\n      countries = _useState4[0],\n      setCountries = _useState4[1];\n\n  var _useState5 = useState(),\n      hoverD = _useState5[0],\n      setHoverD = _useState5[1];\n\n  var _useState6 = useState(false),\n      isModalOpen = _useState6[0],\n      setModalState = _useState6[1];\n\n  var _useState7 = useState(),\n      selectedCountry = _useState7[0],\n      setSelectedCountry = _useState7[1];\n\n  var fetchData = function fetchData() {\n    var featureData;\n    return _regeneratorRuntime.async(function fetchData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getD3Data());\n\n          case 3:\n            featureData = _context.sent;\n            setCountries(featureData);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            handleError(_context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]]);\n  };\n\n  var fetchDataForMap = function fetchDataForMap() {\n    var _data;\n\n    return _regeneratorRuntime.async(function fetchDataForMap$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(getDataForMap());\n\n          case 3:\n            _data = _context2.sent;\n            handleData(_data);\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            handleError(_context2.t0);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]]);\n  };\n\n  var handleGlobeClick = function handleGlobeClick() {\n    if (hoverD) {\n      setSelectedCountry(hoverD);\n      setModalState(true);\n    } else {\n      setModalState(false);\n      setSelectedCountry(undefined);\n    }\n  };\n\n  useEffect(function () {\n    fetchData();\n    fetchDataForMap();\n  }, []);\n  useEffect(function () {\n    // aim at continental Ukraine centroid\n    if (globeEl.current) {\n      globeEl.current.pointOfView({\n        lat: 49,\n        lng: 32,\n        altitude: 0.6\n      });\n    }\n  }, [_JSON$stringify(globeEl)]);\n  var scaleSequentialSqrt = d3['scaleSequentialSqrt'];\n  useEffect(function () {\n    if (data && countries) {\n      countries.forEach(function (country) {\n        var dataCountriesValues = _Object$values(data.countries);\n\n        for (var i = 0; i < dataCountriesValues.length; i++) {\n          if (dataCountriesValues[i].name === country.properties.NAME_LONG || dataCountriesValues[i].name === country.properties.SOVEREIGNT || dataCountriesValues[i].name === country.properties.FORMAL_EN) {\n            return country.statistic = dataCountriesValues[i];\n          }\n        }\n      });\n    }\n  }, [data, countries]);\n  useEffect(function () {\n    if (countries) {\n      handleLoaded(true);\n    }\n  }, [countries]);\n  var maxCases = 2000000;\n  var colorScale = scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  var getVal = function getVal(feat) {\n    if (feat.statistic) {\n      return feat.statistic.cases / Math.max(1e5, maxCases);\n    } else {\n      return feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n    }\n  };\n\n  var maxVal = useMemo(function () {\n    return countries && Math.max.apply(Math, _toConsumableArray(countries.map(getVal)));\n  }, [countries]);\n  colorScale.domain([0, maxVal]);\n\n  var getLabelString = function getLabelString(properties) {\n    if (!hoverD) {\n      setHoverD(properties);\n    }\n\n    if (properties.statistic) return \"<div> \".concat(properties.statistic.name, \"</div>\\n    \");else return \"\\n      <div>\".concat(properties.properties.NAME_SORT, \"</div>\\n    \");\n  };\n\n  var _onPolygonClick = useCallback(function (feature) {\n    setModalState(true);\n\n    if (feature) {\n      setSelectedCountry(feature);\n    } else {\n      setSelectedCountry(undefined);\n      setModalState(false);\n    }\n  }, [selectedCountry]);\n\n  if (error) {\n    return __jsx(\"div\", null, \"Something went wrong \");\n  }\n\n  if (!isLoaded) {\n    return __jsx(Loader, null);\n  }\n\n  var isMobile = window.innerWidth < 700;\n  return __jsx(\"div\", {\n    onClick: handleGlobeClick,\n    className: styles.worldMapContainer\n  }, __jsx(Globe, {\n    ref: globeEl,\n    globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-dark.jpg\",\n    backgroundImageUrl: \"//unpkg.com/three-globe/example/img/night-sky.png\",\n    polygonsData: countries,\n    polygonAltitude: function polygonAltitude(d) {\n      return d === hoverD ? 0.12 : 0.06;\n    },\n    polygonCapColor: function polygonCapColor(d) {\n      return d === hoverD ? 'steelblue' : colorScale(getVal(d));\n    },\n    polygonStrokeColor: function polygonStrokeColor() {\n      return '#111';\n    },\n    polygonLabel: !isMobile ? function (item) {\n      return getLabelString(item);\n    } : '',\n    onPolygonHover: setHoverD,\n    onPolygonClick: function onPolygonClick(r) {\n      return _onPolygonClick(r);\n    },\n    polygonsTransitionDuration: 300\n  }), selectedCountry && selectedCountry.statistic && __jsx(CountryInfoModal, {\n    isOpen: isModalOpen,\n    coutryStatistic: selectedCountry.statistic\n  }));\n};\n\nexport default WorldMap;","map":null,"metadata":{},"sourceType":"module"}