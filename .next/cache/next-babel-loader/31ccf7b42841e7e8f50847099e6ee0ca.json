{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/roman/Desktop/projects/corona/src/containers/MainPage/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { getCountry, getAllCases } from '../../api';\nimport Loader from '../../components/Loader';\n\nvar MainPage = function MainPage() {\n  var _useState = useState(''),\n      currentCountry = _useState[0],\n      setCountry = _useState[1];\n\n  var _useState2 = useState(),\n      allCases = _useState2[0],\n      setCases = _useState2[1];\n\n  var _useState3 = useState(''),\n      error = _useState3[0],\n      handleError = _useState3[1];\n\n  var _useState4 = useState(),\n      activeCountry = _useState4[0],\n      setCurrentCountryInfo = _useState4[1];\n\n  var _useState5 = useState(false),\n      isLoaded = _useState5[0],\n      setLoaded = _useState5[1];\n\n  var getUsersCountry = function getUsersCountry() {\n    var locationResponse;\n    return _regeneratorRuntime.async(function getUsersCountry$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getCountry());\n\n          case 3:\n            locationResponse = _context.sent;\n\n            if (locationResponse.status === 'success') {\n              setCountry(locationResponse.country);\n            }\n\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            handleError(_context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]]);\n  };\n\n  var getInfo = function getInfo() {\n    var cases;\n    return _regeneratorRuntime.async(function getInfo$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(getAllCases());\n\n          case 3:\n            cases = _context2.sent;\n            setCases(cases);\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            handleError(_context2.t0);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]]);\n  };\n\n  useEffect(function () {\n    if (activeCountry) {\n      setLoaded(false);\n    }\n  }, [activeCountry]);\n  useEffect(function () {\n    if (allCases && allCases.data.length && currentCountry) {\n      var currentCountryData = allCases.data.find(function (countryData) {\n        return countryData['Country/Region'] === currentCountry;\n      });\n\n      if (currentCountryData) {\n        setCurrentCountryInfo(currentCountryData);\n      } else {\n        var _currentCountryData = allCases.data.find(function (countryData) {\n          return countryData['Country/Region'] === 'Ukraine';\n        });\n\n        setCurrentCountryInfo(_currentCountryData);\n      }\n    }\n  }, [allCases, currentCountry]);\n  useEffect(function () {\n    getUsersCountry();\n    getInfo();\n  }, []);\n\n  if (!isLoaded) {\n    return __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    });\n  }\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"sadas\");\n};\n\nexport default MainPage;","map":{"version":3,"sources":["/Users/roman/Desktop/projects/corona/src/containers/MainPage/index.tsx"],"names":["React","useState","useEffect","getCountry","getAllCases","Loader","MainPage","currentCountry","setCountry","allCases","setCases","error","handleError","activeCountry","setCurrentCountryInfo","isLoaded","setLoaded","getUsersCountry","locationResponse","status","country","getInfo","cases","data","length","currentCountryData","find","countryData"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAsCC,SAAtC,QAAuD,OAAvD;AAEA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,WAAxC;AAEA,OAAOC,MAAP,MAAmB,yBAAnB;;AAEA,IAAMC,QAAkB,GAAG,SAArBA,QAAqB,GAAM;AAAA,kBACML,QAAQ,CAAS,EAAT,CADd;AAAA,MACxBM,cADwB;AAAA,MACRC,UADQ;;AAAA,mBAEFP,QAAQ,EAFN;AAAA,MAExBQ,QAFwB;AAAA,MAEdC,QAFc;;AAAA,mBAGFT,QAAQ,CAAS,EAAT,CAHN;AAAA,MAGxBU,KAHwB;AAAA,MAGjBC,WAHiB;;AAAA,mBAIgBX,QAAQ,EAJxB;AAAA,MAIxBY,aAJwB;AAAA,MAITC,qBAJS;;AAAA,mBAKDb,QAAQ,CAAU,KAAV,CALP;AAAA,MAKxBc,QALwB;AAAA,MAKdC,SALc;;AAO/B,MAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEWd,UAAU,EAFrB;;AAAA;AAEde,YAAAA,gBAFc;;AAGpB,gBAAIA,gBAAgB,CAACC,MAAjB,KAA4B,SAAhC,EAA2C;AACzCX,cAAAA,UAAU,CAACU,gBAAgB,CAACE,OAAlB,CAAV;AACD;;AALmB;AAAA;;AAAA;AAAA;AAAA;AAOpBR,YAAAA,WAAW,aAAX;;AAPoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAUA,MAAMS,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEQjB,WAAW,EAFnB;;AAAA;AAENkB,YAAAA,KAFM;AAGZZ,YAAAA,QAAQ,CAACY,KAAD,CAAR;AAHY;AAAA;;AAAA;AAAA;AAAA;AAKZV,YAAAA,WAAW,cAAX;;AALY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AASAV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIW,aAAJ,EAAmB;AACjBG,MAAAA,SAAS,CAAC,KAAD,CAAT;AACD;AACF,GAJQ,EAIN,CAACH,aAAD,CAJM,CAAT;AAMAX,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIO,QAAQ,IAAIA,QAAQ,CAACc,IAAT,CAAcC,MAA1B,IAAoCjB,cAAxC,EAAwD;AACtD,UAAMkB,kBAAkB,GAAGhB,QAAQ,CAACc,IAAT,CAAcG,IAAd,CAAmB,UAACC,WAAD;AAAA,eAAoCA,WAAW,CAAC,gBAAD,CAAX,KAAkCpB,cAAtE;AAAA,OAAnB,CAA3B;;AACA,UAAIkB,kBAAJ,EAAwB;AACtBX,QAAAA,qBAAqB,CAACW,kBAAD,CAArB;AACD,OAFD,MAEO;AACL,YAAMA,mBAAkB,GAAGhB,QAAQ,CAACc,IAAT,CAAcG,IAAd,CAAmB,UAACC,WAAD;AAAA,iBAAoCA,WAAW,CAAC,gBAAD,CAAX,KAAkC,SAAtE;AAAA,SAAnB,CAA3B;;AACAb,QAAAA,qBAAqB,CAACW,mBAAD,CAArB;AACD;AACF;AACF,GAVQ,EAUN,CAAChB,QAAD,EAAWF,cAAX,CAVM,CAAT;AAYAL,EAAAA,SAAS,CAAC,YAAM;AACde,IAAAA,eAAe;AACfI,IAAAA,OAAO;AACR,GAHQ,EAGN,EAHM,CAAT;;AAIA,MAAI,CAACN,QAAL,EAAe;AACb,WAAO,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACD,CArDD;;AAuDA,eAAeT,QAAf","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport styles from './styles.module.scss';\nimport { getCountry, getAllCases } from '../../api';\nimport { ICountryStatistic, IDateStatistic } from '../../models';\nimport Loader from '../../components/Loader';\n\nconst MainPage: React.FC = () => {\n  const [currentCountry, setCountry] = useState<string>('');\n  const [allCases, setCases] = useState<IDateStatistic>();\n  const [error, handleError] = useState<string>('');\n  const [activeCountry, setCurrentCountryInfo] = useState<ICountryStatistic>();\n  const [isLoaded, setLoaded] = useState<boolean>(false);\n\n  const getUsersCountry = async () => {\n    try {\n      const locationResponse = await getCountry();\n      if (locationResponse.status === 'success') {\n        setCountry(locationResponse.country);\n      }\n    } catch (e) {\n      handleError(e);\n    }\n  };\n  const getInfo = async () => {\n    try {\n      const cases = await getAllCases();\n      setCases(cases);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  useEffect(() => {\n    if (activeCountry) {\n      setLoaded(false);\n    }\n  }, [activeCountry]);\n\n  useEffect(() => {\n    if (allCases && allCases.data.length && currentCountry) {\n      const currentCountryData = allCases.data.find((countryData: ICountryStatistic) => countryData['Country/Region'] === currentCountry);\n      if (currentCountryData) {\n        setCurrentCountryInfo(currentCountryData);\n      } else {\n        const currentCountryData = allCases.data.find((countryData: ICountryStatistic) => countryData['Country/Region'] === 'Ukraine');\n        setCurrentCountryInfo(currentCountryData);\n      }\n    }\n  }, [allCases, currentCountry]);\n\n  useEffect(() => {\n    getUsersCountry();\n    getInfo();\n  }, []);\n  if (!isLoaded) {\n    return <Loader />;\n  }\n\n  return <div>sadas</div>;\n};\n\nexport default MainPage;\n"]},"metadata":{},"sourceType":"module"}