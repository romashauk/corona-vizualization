{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nexport var apiUrl = 'https://cors-anywhere.herokuapp.com/https://api.the2019ncov.com/api/';\nexport var codevizApi = 'https://cors-anywhere.herokuapp.com/https://www.covidvisualizer.com/api';\nexport var getAllCases = function getAllCases() {\n  return new _Promise(function _callee(resolve, reject) {\n    var link;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            link = \"\".concat(apiUrl, \"/cases\");\n            fetch(link).then(function (res) {\n              return res.json();\n            })[\"catch\"](function (err) {\n              return reject({\n                code: 401,\n                message: err.message\n              });\n            }).then(function (res) {\n              return resolve(res);\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  });\n};\nexport var getTimeLineNews = function getTimeLineNews() {\n  return new _Promise(function (resolve, reject) {\n    var link = \"\".concat(apiUrl, \"/timeline\");\n    fetch(link).then(function (res) {\n      return res.json();\n    })[\"catch\"](function (err) {\n      return reject({\n        code: 401,\n        message: err.message\n      });\n    }).then(function (res) {\n      return resolve(res);\n    });\n  });\n};\nexport var getCountry = function getCountry() {\n  return new _Promise(function (resolve, reject) {\n    fetch('http://ip-api.com/json').then(function (res) {\n      return res.json();\n    })[\"catch\"](function (err) {\n      return reject({\n        code: 401,\n        message: err.message\n      });\n    }).then(function (res) {\n      return resolve({\n        status: res.status,\n        country: res.country\n      });\n    });\n  });\n};\nexport var getDataForMap = function getDataForMap() {\n  return new _Promise(function (resolve, reject) {\n    fetch(codevizApi).then(function (res) {\n      return res.json();\n    })[\"catch\"](function (err) {\n      return reject({\n        code: 401,\n        message: err.message\n      });\n    }).then(function (res) {\n      return console.log(res);\n    }); // .then((res) => resolve({ status: res.status, country: res.country }));\n  });\n};","map":{"version":3,"sources":["/Users/roman/Desktop/projects/corona/src/api/index.ts"],"names":["apiUrl","codevizApi","getAllCases","resolve","reject","link","fetch","then","res","json","err","code","message","getTimeLineNews","getCountry","status","country","getDataForMap","console","log"],"mappings":";;AAEA,OAAO,IAAMA,MAAM,GAAG,sEAAf;AACP,OAAO,IAAMC,UAAU,GAAG,yEAAnB;AAEP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAA+B;AACxD,SAAO,aAA4B,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BC,YAAAA,IAD2B,aACjBL,MADiB;AAEjCM,YAAAA,KAAK,CAACD,IAAD,CAAL,CACGE,IADH,CACQ,UAACC,GAAD;AAAA,qBAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,aADR,WAES,UAACC,GAAD;AAAA,qBAASN,MAAM,CAAC;AAAEO,gBAAAA,IAAI,EAAE,GAAR;AAAaC,gBAAAA,OAAO,EAAEF,GAAG,CAACE;AAA1B,eAAD,CAAf;AAAA,aAFT,EAGGL,IAHH,CAGQ,UAACC,GAAD;AAAA,qBAASL,OAAO,CAACK,GAAD,CAAhB;AAAA,aAHR;;AAFiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B,CAAP;AAOD,CARM;AAUP,OAAO,IAAMK,eAAe,GAAG,SAAlBA,eAAkB,GAAoC;AACjE,SAAO,aAAiC,UAACV,OAAD,EAAUC,MAAV,EAAqB;AAC3D,QAAMC,IAAI,aAAML,MAAN,cAAV;AACAM,IAAAA,KAAK,CAACD,IAAD,CAAL,CACGE,IADH,CACQ,UAACC,GAAD;AAAA,aAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,KADR,WAES,UAACC,GAAD;AAAA,aAASN,MAAM,CAAC;AAAEO,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,OAAO,EAAEF,GAAG,CAACE;AAA1B,OAAD,CAAf;AAAA,KAFT,EAGGL,IAHH,CAGQ,UAACC,GAAD;AAAA,aAASL,OAAO,CAACK,GAAD,CAAhB;AAAA,KAHR;AAID,GANM,CAAP;AAOD,CARM;AAUP,OAAO,IAAMM,UAAU,GAAG,SAAbA,UAAa,GAAyB;AACjD,SAAO,aAAsB,UAACX,OAAD,EAAUC,MAAV,EAAqB;AAChDE,IAAAA,KAAK,CAAC,wBAAD,CAAL,CACGC,IADH,CACQ,UAACC,GAAD;AAAA,aAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,KADR,WAES,UAACC,GAAD;AAAA,aAASN,MAAM,CAAC;AAAEO,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,OAAO,EAAEF,GAAG,CAACE;AAA1B,OAAD,CAAf;AAAA,KAFT,EAGGL,IAHH,CAGQ,UAACC,GAAD;AAAA,aAASL,OAAO,CAAC;AAAEY,QAAAA,MAAM,EAAEP,GAAG,CAACO,MAAd;AAAsBC,QAAAA,OAAO,EAAER,GAAG,CAACQ;AAAnC,OAAD,CAAhB;AAAA,KAHR;AAID,GALM,CAAP;AAMD,CAPM;AASP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACjC,SAAO,aAAY,UAACd,OAAD,EAAUC,MAAV,EAAqB;AACtCE,IAAAA,KAAK,CAACL,UAAD,CAAL,CACGM,IADH,CACQ,UAACC,GAAD;AAAA,aAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,KADR,WAES,UAACC,GAAD;AAAA,aAASN,MAAM,CAAC;AAAEO,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,OAAO,EAAEF,GAAG,CAACE;AAA1B,OAAD,CAAf;AAAA,KAFT,EAGGL,IAHH,CAGQ,UAACC,GAAD;AAAA,aAASU,OAAO,CAACC,GAAR,CAAYX,GAAZ,CAAT;AAAA,KAHR,EADsC,CAKtC;AACD,GANM,CAAP;AAOD,CARM","sourcesContent":["import { ITimeLineResponse, ICountry, ICountryStatistic, IDateStatistic } from '../models';\n\nexport const apiUrl = 'https://cors-anywhere.herokuapp.com/https://api.the2019ncov.com/api/';\nexport const codevizApi = 'https://cors-anywhere.herokuapp.com/https://www.covidvisualizer.com/api';\n\nexport const getAllCases = (): Promise<IDateStatistic> => {\n  return new Promise<IDateStatistic>(async (resolve, reject) => {\n    const link = `${apiUrl}/cases`;\n    fetch(link)\n      .then((res) => res.json())\n      .catch((err) => reject({ code: 401, message: err.message }))\n      .then((res) => resolve(res));\n  });\n};\n\nexport const getTimeLineNews = (): Promise<ITimeLineResponse[]> => {\n  return new Promise<ITimeLineResponse[]>((resolve, reject) => {\n    const link = `${apiUrl}/timeline`;\n    fetch(link)\n      .then((res) => res.json())\n      .catch((err) => reject({ code: 401, message: err.message }))\n      .then((res) => resolve(res));\n  });\n};\n\nexport const getCountry = (): Promise<ICountry> => {\n  return new Promise<ICountry>((resolve, reject) => {\n    fetch('http://ip-api.com/json')\n      .then((res) => res.json())\n      .catch((err) => reject({ code: 401, message: err.message }))\n      .then((res) => resolve({ status: res.status, country: res.country }));\n  });\n};\n\nexport const getDataForMap = () => {\n  return new Promise((resolve, reject) => {\n    fetch(codevizApi)\n      .then((res) => res.json())\n      .catch((err) => reject({ code: 401, message: err.message }))\n      .then((res) => console.log(res));\n    // .then((res) => resolve({ status: res.status, country: res.country }));\n  });\n};\n"]},"metadata":{},"sourceType":"module"}