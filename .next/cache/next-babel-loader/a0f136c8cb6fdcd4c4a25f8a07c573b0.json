{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useRef, useEffect, useMemo, useCallback } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap, getD3Data } from '../../api';\nimport Loader from '../../components/Loader';\nimport Globe from 'react-globe.gl';\nimport * as d3 from 'd3';\nimport CountryInfoModal from './CountryInfoModal';\n\nconst WorldMap = () => {\n  const globeEl = useRef(null);\n  const {\n    0: isLoaded,\n    1: handleLoaded\n  } = useState(false);\n  const {\n    0: data,\n    1: handleData\n  } = useState();\n  const {\n    0: error,\n    1: handleError\n  } = useState(undefined);\n  const {\n    0: countries,\n    1: setCountries\n  } = useState();\n  const {\n    0: hoverD,\n    1: setHoverD\n  } = useState();\n  const {\n    0: isModalOpen,\n    1: setModalState\n  } = useState(false);\n  const {\n    0: selectedCountry,\n    1: setSelectedCountry\n  } = useState();\n\n  const fetchData = async () => {\n    try {\n      const featureData = await getD3Data();\n      setCountries(featureData);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  const fetchDataForMap = async () => {\n    try {\n      const data = await getDataForMap();\n      handleData(data);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  const handleGlobeClick = () => {\n    if (hoverD) {\n      setSelectedCountry(hoverD);\n      setModalState(true);\n    } else {\n      setModalState(false);\n      setSelectedCountry(undefined);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n    fetchDataForMap();\n  }, []);\n  useEffect(() => {\n    // aim at continental Ukraine centroid\n    if (globeEl.current) {\n      console.dir(globeEl.current.children); // globeEl.current.pointOfView({ lat: 49, lng: 32, altitude: 0.6 });\n    }\n  }, [_JSON$stringify(globeEl)]);\n  const scaleSequentialSqrt = d3['scaleSequentialSqrt'];\n  useEffect(() => {\n    if (data && countries) {\n      countries.forEach(country => {\n        const dataCountriesValues = _Object$values(data.countries);\n\n        for (let i = 0; i < dataCountriesValues.length; i++) {\n          if (dataCountriesValues[i].name === country.properties.NAME_LONG || dataCountriesValues[i].name === country.properties.SOVEREIGNT || dataCountriesValues[i].name === country.properties.FORMAL_EN) {\n            return country.statistic = dataCountriesValues[i];\n          }\n        }\n      });\n    }\n  }, [data, countries]);\n  useEffect(() => {\n    if (countries) {\n      handleLoaded(true);\n    }\n  }, [countries]);\n  const maxCases = 2000000;\n  const colorScale = scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  const getVal = feat => {\n    if (feat.statistic) {\n      return feat.statistic.cases / Math.max(1e5, maxCases);\n    } else {\n      return feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n    }\n  };\n\n  const maxVal = useMemo(() => countries && Math.max(...countries.map(getVal)), [countries]);\n  colorScale.domain([0, maxVal]);\n\n  const getLabelString = properties => {\n    if (!hoverD) {\n      setHoverD(properties);\n    }\n\n    if (properties.statistic) return `<div> ${properties.statistic.name}</div>\n    `;else return `\n      <div>${properties.properties.NAME_SORT}</div>\n    `;\n  };\n\n  const onPolygonClick = useCallback(feature => {\n    setModalState(true);\n\n    if (feature) {\n      setSelectedCountry(feature);\n    } else {\n      setSelectedCountry(undefined);\n      setModalState(false);\n    }\n  }, [selectedCountry]);\n\n  if (error) {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Something went wrong \");\n  }\n\n  if (!isLoaded) {\n    return __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    });\n  }\n\n  const isMobile = window.innerWidth < 700;\n  return __jsx(\"div\", {\n    ref: globeEl,\n    onClick: handleGlobeClick,\n    className: styles.worldMapContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, __jsx(Globe, {\n    globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-dark.jpg\",\n    backgroundImageUrl: \"//unpkg.com/three-globe/example/img/night-sky.png\",\n    polygonsData: countries,\n    polygonAltitude: d => d === hoverD ? 0.12 : 0.06,\n    polygonCapColor: d => d === hoverD ? 'steelblue' : colorScale(getVal(d)),\n    polygonStrokeColor: () => '#111',\n    polygonLabel: !isMobile ? item => getLabelString(item) : '',\n    onPolygonHover: setHoverD,\n    onPolygonClick: r => onPolygonClick(r),\n    polygonsTransitionDuration: 300,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }), selectedCountry && selectedCountry.statistic && __jsx(CountryInfoModal, {\n    isOpen: isModalOpen,\n    coutryStatistic: selectedCountry.statistic,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }));\n};\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx"],"names":["React","useState","useRef","useEffect","useMemo","useCallback","styles","getDataForMap","getD3Data","Loader","Globe","d3","CountryInfoModal","WorldMap","globeEl","isLoaded","handleLoaded","data","handleData","error","handleError","undefined","countries","setCountries","hoverD","setHoverD","isModalOpen","setModalState","selectedCountry","setSelectedCountry","fetchData","featureData","e","fetchDataForMap","handleGlobeClick","current","console","dir","children","scaleSequentialSqrt","forEach","country","dataCountriesValues","i","length","name","properties","NAME_LONG","SOVEREIGNT","FORMAL_EN","statistic","maxCases","colorScale","interpolateYlOrRd","getVal","feat","cases","Math","max","GDP_MD_EST","POP_EST","maxVal","map","domain","getLabelString","NAME_SORT","onPolygonClick","feature","isMobile","window","innerWidth","worldMapContainer","d","item","r"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useMemo, useCallback } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap, getD3Data } from '../../api';\nimport Loader from '../../components/Loader';\nimport { IVirtualizationResponse, IError, IFeature } from '../../models';\nimport Globe from 'react-globe.gl';\nimport * as d3 from 'd3';\nimport CountryInfoModal from './CountryInfoModal';\n\nconst WorldMap: React.FC = () => {\n  const globeEl = useRef(null);\n  const [isLoaded, handleLoaded] = useState<boolean>(false);\n  const [data, handleData] = useState<IVirtualizationResponse>();\n  const [error, handleError] = useState<IError | undefined>(undefined);\n  const [countries, setCountries] = useState<IFeature[]>();\n  const [hoverD, setHoverD] = useState();\n  const [isModalOpen, setModalState] = useState<boolean>(false);\n  const [selectedCountry, setSelectedCountry] = useState<IFeature>();\n\n  const fetchData = async () => {\n    try {\n      const featureData = await getD3Data();\n      setCountries(featureData);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  const fetchDataForMap = async () => {\n    try {\n      const data = await getDataForMap();\n      handleData(data);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  const handleGlobeClick = (): void => {\n    if (hoverD) {\n      setSelectedCountry(hoverD);\n      setModalState(true);\n    } else {\n      setModalState(false);\n      setSelectedCountry(undefined);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n    fetchDataForMap();\n  }, []);\n\n  useEffect(() => {\n    // aim at continental Ukraine centroid\n    if (globeEl.current) {\n      console.dir(globeEl.current.children);\n      // globeEl.current.pointOfView({ lat: 49, lng: 32, altitude: 0.6 });\n    }\n  }, [JSON.stringify(globeEl)]);\n\n  const scaleSequentialSqrt = d3['scaleSequentialSqrt'];\n\n  useEffect(() => {\n    if (data && countries) {\n      countries.forEach((country: IFeature) => {\n        const dataCountriesValues = Object.values(data.countries);\n        for (let i = 0; i < dataCountriesValues.length; i++) {\n          if (\n            dataCountriesValues[i].name === country.properties.NAME_LONG ||\n            dataCountriesValues[i].name === country.properties.SOVEREIGNT ||\n            dataCountriesValues[i].name === country.properties.FORMAL_EN\n          ) {\n            return (country.statistic = dataCountriesValues[i]);\n          }\n        }\n      });\n    }\n  }, [data, countries]);\n\n  useEffect(() => {\n    if (countries) {\n      handleLoaded(true);\n    }\n  }, [countries]);\n\n  const maxCases = 2000000;\n\n  const colorScale = scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  const getVal = (feat: any) => {\n    if (feat.statistic) {\n      return feat.statistic.cases / Math.max(1e5, maxCases);\n    } else {\n      return feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n    }\n  };\n\n  const maxVal = useMemo(() => countries && Math.max(...countries.map(getVal)), [countries]);\n\n  colorScale.domain([0, maxVal]);\n\n  const getLabelString = (properties: any): string => {\n    if (!hoverD) {\n      setHoverD(properties);\n    }\n    if (properties.statistic)\n      return `<div> ${properties.statistic.name}</div>\n    `;\n    else\n      return `\n      <div>${properties.properties.NAME_SORT}</div>\n    `;\n  };\n\n  const onPolygonClick = useCallback(\n    (feature: any) => {\n      setModalState(true);\n      if (feature) {\n        setSelectedCountry(feature);\n      } else {\n        setSelectedCountry(undefined);\n        setModalState(false);\n      }\n    },\n    [selectedCountry]\n  );\n\n  if (error) {\n    return <div>Something went wrong </div>;\n  }\n  if (!isLoaded) {\n    return <Loader />;\n  }\n\n  const isMobile = window.innerWidth < 700;\n\n  return (\n    <div ref={globeEl} onClick={handleGlobeClick} className={styles.worldMapContainer}>\n      <Globe\n        globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-dark.jpg\"\n        backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n        polygonsData={countries}\n        polygonAltitude={(d) => (d === hoverD ? 0.12 : 0.06)}\n        polygonCapColor={(d) => (d === hoverD ? 'steelblue' : colorScale(getVal(d)))}\n        polygonStrokeColor={() => '#111'}\n        polygonLabel={!isMobile ? (item) => getLabelString(item) : ''}\n        onPolygonHover={setHoverD}\n        onPolygonClick={(r) => onPolygonClick(r)}\n        polygonsTransitionDuration={300}\n      />\n      {selectedCountry && selectedCountry.statistic && (\n        <CountryInfoModal isOpen={isModalOpen} coutryStatistic={selectedCountry.statistic} />\n      )}\n    </div>\n  );\n};\n\nexport default WorldMap;\n"]},"metadata":{},"sourceType":"module"}