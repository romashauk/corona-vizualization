{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useMemo } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap } from '../../api';\nimport Loader from '../../components/Loader';\nimport Globe from 'react-globe.gl';\n\nvar WorldMap = function WorldMap() {\n  var _useState = useState(false),\n      isLoaded = _useState[0],\n      handleLoaded = _useState[1];\n\n  var _useState2 = useState(),\n      data = _useState2[0],\n      handleData = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      error = _useState3[0],\n      handleError = _useState3[1];\n\n  var _useState4 = useState({\n    features: []\n  }),\n      countries = _useState4[0],\n      setCountries = _useState4[1];\n\n  var _useState5 = useState(),\n      hoverD = _useState5[0],\n      setHoverD = _useState5[1];\n\n  var fetchData = function fetchData() {\n    var _data;\n\n    return _regeneratorRuntime.async(function fetchData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getDataForMap());\n\n          case 3:\n            _data = _context.sent;\n            handleData(_data);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            handleError(_context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]]);\n  };\n\n  useEffect(function () {\n    fetch('https://vasturiano.github.io/globe.gl/example/datasets/ne_110m_admin_0_countries.geojson').then(function (res) {\n      return res.json();\n    }).then(setCountries);\n    fetchData();\n  }, []); //   const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  useEffect(function () {\n    if (data) {\n      handleLoaded(true);\n    }\n  }, [data]);\n  var maxVal = useMemo(function () {\n    return Math.max.apply(Math, _toConsumableArray(countries.features.map(getVal)));\n  }, [countries]);\n\n  var getVal = function getVal(feat) {\n    return feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n  }; // colorScale.domain([0, maxVal]);\n\n\n  if (error) {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Something went wrong \");\n  }\n\n  if (!isLoaded) {\n    return __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    });\n  }\n\n  console.log();\n  return __jsx(\"div\", {\n    className: styles.worldMapContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, __jsx(Globe, {\n    globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-dark.jpg\",\n    backgroundImageUrl: \"//unpkg.com/three-globe/example/img/night-sky.png\",\n    polygonsData: countries.features,\n    polygonAltitude: function polygonAltitude(d) {\n      return d === hoverD ? 0.12 : 0.06;\n    },\n    polygonCapColor: function polygonCapColor(d) {\n      return 'red';\n    },\n    polygonSideColor: function polygonSideColor() {\n      return 'rgba(0, 123, 0, 0.15)';\n    },\n    polygonStrokeColor: function polygonStrokeColor() {\n      return '#111';\n    },\n    polygonLabel: function polygonLabel(_ref) {\n      var d = _ref.properties;\n      return \"\\n        <b>\".concat(d.ADMIN, \" (\").concat(d.ISO_A2, \"):</b> <br />\\n        GDP: <i>\").concat(d.GDP_MD_EST, \"</i> M$<br/>\\n        Population: <i>\").concat(d.POP_EST, \"</i>\\n      \");\n    },\n    onPolygonHover: setHoverD,\n    polygonsTransitionDuration: 300,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }));\n};\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/roman/Desktop/projects/corona/src/containers/WorldMap/index.tsx"],"names":["React","useState","useEffect","useMemo","styles","getDataForMap","Loader","Globe","WorldMap","isLoaded","handleLoaded","data","handleData","undefined","error","handleError","features","countries","setCountries","hoverD","setHoverD","fetchData","fetch","then","res","json","maxVal","Math","max","map","getVal","feat","properties","GDP_MD_EST","POP_EST","console","log","worldMapContainer","d","ADMIN","ISO_A2"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useMemo } from 'react';\nimport styles from './styles.module.scss';\nimport { getDataForMap } from '../../api';\nimport Loader from '../../components/Loader';\nimport { IVirtualizationResponse, IError } from '../../models';\nimport Globe from 'react-globe.gl';\nimport d3 from 'd3';\n\nconst WorldMap: React.FC = () => {\n  const [isLoaded, handleLoaded] = useState<boolean>(false);\n  const [data, handleData] = useState<IVirtualizationResponse>();\n  const [error, handleError] = useState<IError | undefined>(undefined);\n  const [countries, setCountries] = useState({ features: [] });\n  const [hoverD, setHoverD] = useState();\n\n  const fetchData = async () => {\n    try {\n      const data = await getDataForMap();\n      handleData(data);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  useEffect(() => {\n    fetch('https://vasturiano.github.io/globe.gl/example/datasets/ne_110m_admin_0_countries.geojson')\n      .then((res) => res.json())\n      .then(setCountries);\n    fetchData();\n  }, []);\n  //   const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  useEffect(() => {\n    if (data) {\n      handleLoaded(true);\n    }\n  }, [data]);\n  const maxVal = useMemo(() => Math.max(...countries.features.map(getVal)), [countries]);\n  const getVal = (feat) => feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n  // colorScale.domain([0, maxVal]);\n\n  if (error) {\n    return <div>Something went wrong </div>;\n  }\n  if (!isLoaded) {\n    return <Loader />;\n  }\n  console.log();\n  return (\n    <div className={styles.worldMapContainer}>\n      <Globe\n        globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-dark.jpg\"\n        backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n        polygonsData={countries.features}\n        polygonAltitude={(d) => (d === hoverD ? 0.12 : 0.06)}\n        polygonCapColor={(d) => 'red'}\n        polygonSideColor={() => 'rgba(0, 123, 0, 0.15)'}\n        polygonStrokeColor={() => '#111'}\n        polygonLabel={({ properties: d }) => `\n        <b>${d.ADMIN} (${d.ISO_A2}):</b> <br />\n        GDP: <i>${d.GDP_MD_EST}</i> M$<br/>\n        Population: <i>${d.POP_EST}</i>\n      `}\n        onPolygonHover={setHoverD}\n        polygonsTransitionDuration={300}\n      />\n    </div>\n  );\n};\n\nexport default WorldMap;\n"]},"metadata":{},"sourceType":"module"}